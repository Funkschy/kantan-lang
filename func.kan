import "lexer";
import "span";
import "ident";
import "vec";
import "param";
import "tyid";

type ParamList struct {
    params: vec.Vec
}

def pl_from_vec(params: vec.Vec): ParamList {
    return ParamList { params: params };
}

def free_pl(pl: *ParamList): void {
    vec.free_v(&pl.params);
}

def add_param(pl: *ParamList, p: *param.Param): void {
    vec.push(&pl.params, p as *void);
}

type FuncDef struct {
    is_extern: bool,
    name: ident.Ident,
    ret_ty: tyid.Type,
    params: ParamList
}

def create(ident: lexer.Token, params: ParamList, ret_ty: tyid.Type, is_extern: bool): FuncDef {
    return FuncDef {
        is_extern: is_extern,
        name: ident.create(ident),
        ret_ty: ret_ty,
        params: params
    };
}

def get_param_ptr(f: *FuncDef, i: i32): *param.Param {
    return vec.get_ptr(&f.params.params, i) as *param.Param;
}

def num_params(f: *FuncDef): i32 {
    return f.params.params.len;
}

def free_f(f: *FuncDef): void {
    free_pl(&f.params);
}
