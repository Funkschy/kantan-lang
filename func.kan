import "ty";
import "dbg";
import "vec";
import "std";
import "span";
import "tyid";
import "ident";
import "lexer";

type Param struct {
    name: ident.Ident,
    ty: tyid.Type
}

def create_param(name: ident.Ident, ty: tyid.Type): Param {
    return Param { name: name, ty: ty };
}

def is_varargs_param(p: *Param): bool {
    return std.memcmp(ident.start(&p.name) as *void, "..." as *void, 3) == 0;
}

def (p: *Param) free() {
    p.ty.free();
}

type ParamList struct {
    params: vec.Vec
}

def pl_from_vec(params: vec.Vec): ParamList {
    return ParamList { params: params };
}

def free_pl(pl: *ParamList) {
    for let i: usize = 0; i < pl.params.len; i += 1 {
        (pl.params.get_ptr(i) as *Param).free();
    }
    pl.params.free();
}

def add_param(pl: *ParamList, p: *Param) {
    pl.params.push(p as *void);
}

type Kind enum {
    Method, Procedure, Extern, Delegate
}

type FuncDef struct {
    kind: Kind,
    exported: bool,
    name: ident.Ident,
    receiver: Param,
    ret_ty: tyid.Type,
    params: ParamList,
    signature: *ty.Type
}

def create_func(
    name: lexer.Token,
    params: ParamList,
    ret_ty: tyid.Type,
    kind: Kind
): FuncDef {
    dbg.assert(kind != Kind.Method, "use create_method instead");

    return FuncDef {
        kind: kind,
        exported: false,
        name: ident.create(name),
        receiver: undefined,
        ret_ty: ret_ty,
        params: params,
        signature: null
    };
}

def create_method(
    name: lexer.Token,
    receiver: Param,
    params: ParamList,
    ret_ty: tyid.Type
): FuncDef {
    return FuncDef {
        kind: Kind.Method,
        exported: false,
        name: ident.create(name),
        receiver: receiver,
        ret_ty: ret_ty,
        params: params,
        signature: null
    };
}

def (f: *FuncDef) get_param_ptr(i: u32): *Param {
    return f.params.params.get_ptr(i as usize) as *Param;
}

def (f: *FuncDef) num_params(): u32 {
    return f.params.params.len as u32;
}

def (f: *FuncDef) is_extern(): bool {
    return f.kind == Kind.Extern;
}

def (f: *FuncDef) is_exported(): bool {
    return f.exported;
}

def (f: *FuncDef) is_delegate(): bool {
    return f.kind == Kind.Delegate;
}

def (f: *FuncDef) is_method(): bool {
    return f.kind == Kind.Method;
}

def (f: *FuncDef) is_procedure(): bool {
    return f.kind == Kind.Procedure;
}

def (f: *FuncDef) free() {
    free_pl(&f.params);
    if f.kind == Kind.Method {
        f.receiver.free();
    }
    f.ret_ty.free();
}
