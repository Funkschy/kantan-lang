import "io";
import "std";
import "dbg";
import "opt";

import "config";
import "error";
import "parser";
import "reader";
import "span";
import "source";
import "mod";

import "tychk/tychk";
import "path";

import "transform";
import "llvm-bindings" as llvm; // needed for shutdown

def main(argc: i32, argv: *string): i32 {
    defer llvm.shutdown();
    if argc <= 1 {
        io.printf("ERROR: no input files\n");
        return - 1;
    }

    // get the current working directory, so we can resolve file paths
    // relative to it
    let cwd_buf = path.get_cwd();
    defer path.free_pb(&cwd_buf);
    let cwd = cwd_buf.inner;

    let num_total_errs: usize = 0;

    let opts = opt.parse(argc, argv);
    let config = config.from_options(&opts);
    defer config.free();

    if opts.had_errors || opts.exit_immediately {
        if opts.exit_immediately {
            return 0;
        }

        return -4;
    }

    if config.files.len < 1 {
        io.printf("ERROR: no input files\n");
        return - 1;
    }
    let files = config.files.elements as *string;

    let home_dir = std.getenv("HOME");
    // TODO(#26): users should be able to change this using env vars
    let std_dir = std.format_str("%s/.kantan/std", home_dir);
    defer delete std_dir;

    let file_map = reader.create();
    defer file_map.free();

    let res = file_map.add_std_lib(&cwd, std_dir);
    if res.err_code != error.CompileError.OK {
        let err_msg = error.err2str(res.err_code, res.file_name);
        io.printf("ERROR: %s\n", err_msg);
        delete err_msg;
        return -2;
    }

    let res = file_map.add_all(&cwd, config.files.len, files);
    if res.err_code != error.CompileError.OK {
        let err_msg = error.err2str(res.err_code, res.file_name);
        io.printf("ERROR: %s\n", err_msg);
        delete err_msg;
        return -3;
    }

    let project_root = file_map.proj_root.inner;
    let mm = mod.map_with_cap(project_root, file_map.num_files());
    defer mod.map_free(&mm);

    for let i: usize = 0; i < file_map.num_files(); i += 1 {
        let src = file_map.get_ptr_by_idx(i);

        let p = parser.create(src);
        defer parser.free_p(&p);

        let curr_mod = parser.parse(&p);
        curr_mod.set_mangled_mod_name(project_root);

        let num_errs = parser.num_errs(&p);
        num_total_errs = num_total_errs + num_errs;
        if num_errs > 0 {
            io.printf("%d parse errors found\n", num_errs);
            print_parse_errors(&p, &file_map, &cwd);
        }

        mod.add_mod(&mm, curr_mod);

        // just get the first stmt
        let s = mod.get_stmt(curr_mod, 0);

        if s == null {
            io.printf("ERROR: no valid statement in file\n");
        }
    }

    let tychk_res = tychk.empty_result();
    // this also frees all the types, so it has to happen after compilation
    // TODO(#67): implement some form of type garbage collection
    defer tychk.free_result(&tychk_res);

    if num_total_errs == 0 {
        let tc = tychk.create(&mm, &config);
        defer tychk.free_tc(&tc);

        tychk_res = tychk.check(&tc);

        if tychk_res.had_errors {
            let num_errs = tychk.num_errs(&tc);
            num_total_errs = num_total_errs + num_errs;
            io.printf("%d type errors found\n", num_errs);
            print_type_errors(&tc, &file_map, &cwd);
        }
    }

    if num_total_errs == 0 {
        transform.compile_all(
            transform.CompilationData {
                mods: tychk_res.mods,
                main_func: tychk_res.main_func,
                proj_root: project_root,
                global_types: tychk_res.global_types,
                config: &config,
                std_dir: std_dir
            },
            tychk_res.types
        );
    }

    if num_total_errs > 0 {
        io.printf("%d compile errors found\n", num_total_errs);
        return 1;
    }

    return 0;
}

def print_parse_errors(p: *parser.Parser, fm: *reader.FileMap, abs_path: *path.Path) {
    for let i: usize = 0; i < parser.num_errs(p); i += 1 {
        let err = parser.get_err(p, i);
        let src = fm.get_ptr_from_span(err.span);

        print_error(err.text, err.span, src, abs_path);
    }
}

def print_type_errors(tc: *tychk.TypeChecker, fm: *reader.FileMap, abs_path: *path.Path) {
    for let i: usize = 0; i < tychk.num_errs(tc); i += 1 {
        let err = tychk.get_err(tc, i);
        let src = fm.get_ptr_from_span(err.span);
        io.printf("%.*s\n", src.file.path.inner.len, src.file.path.inner.inner);

        print_error(err.text, err.span, src, abs_path);
    }
}

def print_spanned(line_info: source.LineSpan, file: *source.SourceFile) {
    io.printf(" | ");
    let s = line_info.span;

    let ptr = s.start;
    let len = s.len();
    let num_lines = 1;
    while (ptr - s.start) as usize < len {
        let c = *ptr;
        io.putchar(c as i32);
        if c == '\n' {
            io.printf(" | ");
            num_lines += 1;
        }
        ptr = ptr + 1;
    }

    io.putchar('\n');

    if num_lines == 1 {
        io.printf(" | ");
        for let i: u32 = 1; i < line_info.pos.col; i += 1 {
            io.putchar(' ');
        }
        io.printf("^\n");
    }
}

def print_error(err_text: string, span: span.Span, file: *source.SourceFile, abs_path: *path.Path) {
    dbg.assert(file != null, "source file was null");

    let line_info = file.find_line(span);
    let name = file.name_dup();

    let offset: usize = 0;
    let file_path = &file.file.path.inner;

    // TODO(#13): this only works when the filepath is in a subdir of abs_path
    //  i don't actually know, if this is still a problem, this needs to be
    //  experimented with
    if path.is_abs(file_path) {
        let overlap = path.count_overlap(abs_path, file_path);
        if overlap == abs_path.len {
            offset = overlap + 1;
        }
    }

    io.printf(
        "ERROR: %s\n--> %s:%u:%u\n",
        err_text,
        name + offset,
        line_info.pos.lnr,
        line_info.pos.col
    );

    print_spanned(line_info, file);
    io.printf("\n");

    delete name;
}
