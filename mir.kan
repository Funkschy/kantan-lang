#include "mir_types.h"
#include "std.h"

import "io";
import "ty";
import "std";
import "vec";
import "str";
import "map";
import "dbg";
import "vmap";
import "span";
import "ident";
import "source";

extern def mir_binary2str(kind: i32): string;
extern def mir_unary2str(kind: i32): string;

type Module struct {
    globals: map.Map, // map.Map<RefName, *GlobalConst>
    functions: map.Map, // map.Map<RefName, *Func>
    structs: map.Map // map.Map<RefName, *Struct>
}

def create_mod(globals: map.Map, funcs: map.Map, structs: map.Map): Module {
    return Module {
        globals: globals,
        functions: funcs,
        structs: structs
    };
}

def free_mod(m: *Module): void {
    // free function names
    let f_iter = map.iter(&m.functions);
    let item = map.iter_next(&f_iter);
    while item != null {
        let f = item.value as *Func;
        free_func(f);
        delete f;

        item = map.iter_next(&f_iter);
    }

    // free struct names
    let s_iter = map.iter(&m.structs);
    let item = map.iter_next(&s_iter);
    while item != null {
        let s = item.value as *Struct;
        free_struct(s);
        delete s;

        item = map.iter_next(&s_iter);
    }

    // free globals
    let g_iter = map.iter(&m.globals);
    let item = map.iter_next(&g_iter);
    while item != null {
        let gc = item.value as *GlobalConst;
        free_global_const(gc);
        delete gc;

        item = map.iter_next(&g_iter);
    }

    map.free_m(&m.functions);
    map.free_m(&m.structs);
    map.free_m(&m.globals);
}

def dump_module(m: *Module): void {
    let s_iter = map.iter(&m.structs);
    let item = map.iter_next(&s_iter);
    while item != null {
        let s = item.value as *Struct;
        let s_ty = ty.as_struct(s.ty);
        io.printf("%.*s { ", ident.len(&s_ty.name), ident.start(&s_ty.name));

        let i = 0;
        while i < ty.num_fields(s_ty) {
            if i > 0 {
                io.printf(", ");
            }

            let field = ty.field_at(s_ty, i);

            let ty_s = "";
            let free_ty_s = ty.to_string(field.ty, &ty_s);
            io.printf(
                "%.*s: %s",
                ident.len(&field.name),
                ident.start(&field.name),
                ty_s
            );

            if free_ty_s {
                delete ty_s;
            }

            i = i + 1;
        }

        io.printf(" }\n");
        item = map.iter_next(&s_iter);
    }

    let g_iter = map.iter(&m.globals);
    let item = map.iter_next(&g_iter);
    while item != null {
        let g = item.value as *GlobalConst;

        let ty_s: string = null;
        let free = ty.to_string(g.ty, &ty_s);

        let quote = "";
        let quote_len = 0;

        if ty.is_string(g.ty) {
            let c = '"';
            quote = &c as string;
            quote_len = 1;
        }

        io.printf(
            "%.*s: %s = %.*s%.*s%.*s\n",
            g.name.len, g.name.data,
            ty_s,
            quote_len, quote,
            span.len(g.value), g.value.start,
            quote_len, quote
        );

        if free {
            delete ty_s;
        }

        item = map.iter_next(&g_iter);
    }

    let f_iter = map.iter(&m.functions);
    let item = map.iter_next(&f_iter);
    while item != null {
        let f = item.value as *Func;
        bm_dump(&f.blocks);
        item = map.iter_next(&f_iter);
    }
}

type Func struct {
    name: OwnedName,
    blocks: BlockMap,
    ty: *ty.Type
}

def create_func(t: *ty.Type, mangled_name: OwnedName): Func {
    dbg.assert(ty.is_func(t), "func type was not func");

    return Func {
        name: mangled_name,
        blocks: create_block_map(ref_name(mangled_name)),
        ty: t
    };
}

def free_func(f: *Func): void {
    free_name(&f.name);
    free_block_map(&f.blocks);
}

def func_push_instr(f: *Func, inst: *Inst): void {
    bm_push_instr(&f.blocks, inst);
}

type Struct struct {
    name: OwnedName,
    ty: *ty.Type
}

def create_struct(t: *ty.Type, mangled_name: OwnedName): Struct {
    dbg.assert(ty.is_struct(t), "struct type was not struct");

    return Struct {
        name: mangled_name,
        ty: t
    };
}

def free_struct(f: *Struct): void {
    free_name(&f.name);
}

type MetaData struct {
    pos: source.SourcePos
}

def create_meta(pos: source.SourcePos): MetaData {
    return MetaData { pos: pos };
}

type GlobalConst struct {
    name: OwnedName,
    meta: MetaData,
    ty: *ty.Type,
    value: span.Span
}

def create_const(
    name: OwnedName,
    meta: MetaData,
    ty: *ty.Type,
    value: span.Span
): GlobalConst {
    return GlobalConst {
        name: name,
        meta: meta,
        ty: ty,
        value: value
    };
}

def free_global_const(gc: *GlobalConst): void {
    free_name(&gc.name);
}

def const_name(c: *GlobalConst): RefName {
    return ref_name(c.name);
}

type InstBlock struct {
    instructions: vec.Vec // vec.Vec<Inst>
}

def create_inst_block(): InstBlock {
    return InstBlock { instructions: vec.create(sizeof Inst) };
}

def push_instr(b: *InstBlock, inst: *Inst): void {
    vec.push(&b.instructions, inst as *void);
}

def get_instr(b: *InstBlock, idx: i32): *Inst {
    return vec.get_ptr(&b.instructions, idx) as *Inst;
}

def free_inst_block(b: *InstBlock): void {
    let i = 0;
    while i < b.instructions.len {
        free_inst(vec.get_ptr(&b.instructions, i) as *Inst);
        i = i + 1;
    }
    vec.free_v(&b.instructions);
}

type BasicBlock struct {
    label: Label,
    instructions: InstBlock,
    terminator: Inst
}

def create_bb(label: Label): BasicBlock {
    return BasicBlock {
        label: label,
        instructions: create_inst_block(),
        terminator: create_inst_nop()
    };
}

// number of instructions excluding label and terminator
def bb_num_instr(bb: *BasicBlock): i32 {
    return bb.instructions.instructions.len;
}

def bb_push_instr(bb: *BasicBlock, inst: *Inst): void {
    push_instr(&bb.instructions, inst);
}

def bb_get_instr(bb: *BasicBlock, idx: i32): *Inst {
    return get_instr(&bb.instructions, idx);
}

def free_bb(bb: *BasicBlock): void {
    free_label(&bb.label);
    free_inst_block(&bb.instructions);
    free_inst(&bb.terminator);
}

type OwnedName struct {
    len: i32,
    data: string
}

def free_name(n: *OwnedName): void {
    delete n.data;
}

type RefName struct {
    len: i32,
    data: string
}

def make_owned_name(len: i32, data: string): OwnedName {
    return OwnedName { len: len, data: data };
}

// like make_owned_name, but copies the data automatically
def make_copied_name(len: i32, data: string): OwnedName {
    return make_owned_name(len, std.strndup(data, len));
}

def make_ref_name(len: i32, data: string): RefName {
    return RefName { len: len, data: data };
}

def ref_name(owned: OwnedName): RefName {
    return make_ref_name(owned.len, owned.data);
}

def empty_name(): RefName {
    return make_ref_name(0, null);
}

type Label struct {
    name: OwnedName
}

def create_label(n: OwnedName): Label {
    return Label { name: n };
}

def clone_label(l: *Label): Label {
    return create_label(make_copied_name(l.name.len, l.name.data));
}

def free_label(l: *Label): void {
    free_name(&l.name);
}

def label_name(l: *Label): RefName {
    return ref_name(l.name);
}

type AddressName struct {
    value: RefName // name table owns name
}

def make_addr_name(value: RefName, ty: *ty.Type): Address {
    let hi = std.int_to_ptr(value.len);
    let lo = value.data as *void;
    return create_addr(MIR_ADDR_NAME, ty, hi, lo);
}

def clone_addr_name(a: *Address): Address {
    dbg.assert_fmt(is_addr_name(a), "addr should be name, but was %d", a.kind);
    let name = as_addr_name(a);
    return make_addr_name(name.value, a.ty);
}

def as_addr_name(a: *Address): AddressName {
    let len = std.ptr_to_int(a.data_hi);
    let data = a.data_lo as string;
    let name = make_ref_name(len, data);
    return AddressName { value: name };
}

def is_addr_name(a: *Address): bool {
    return a.kind == MIR_ADDR_NAME;
}

type AddressConst struct {
    span: span.Span
}

def make_addr_const(ty: *ty.Type, s: span.Span): Address {
    return create_addr(MIR_ADDR_CONST, ty, s.start as *void, s.end as *void);
}

def as_addr_const(a: *Address): AddressConst {
    let s = span.create(a.data_hi as string, a.data_lo as string);
    return AddressConst { span: s };
}

def is_addr_const(a: *Address): bool {
    return a.kind == MIR_ADDR_CONST;
}

type AddressGlobal struct {
    name: RefName
}

def make_addr_global(name: RefName, ty: *ty.Type): Address {
    let hi = std.int_to_ptr(name.len);
    let lo = name.data as *void;
    return create_addr(MIR_ADDR_GLOBAL, ty, hi, lo);
}

def as_addr_global(a: *Address): AddressGlobal {
    let len = std.ptr_to_int(a.data_hi);
    let data = a.data_lo as string;
    let name = make_ref_name(len, data);
    return AddressGlobal { name: name };
}

def is_addr_global(a: *Address): bool {
    return a.kind == MIR_ADDR_GLOBAL;
}

type AddressRef struct {
    name: RefName
}

def make_addr_ref(name: RefName, ty: *ty.Type): Address {
    let hi = std.int_to_ptr(name.len);
    let lo = name.data as *void;
    return create_addr(MIR_ADDR_REF, ty, hi, lo);
}

def as_addr_ref(a: *Address): AddressRef {
    let len = std.ptr_to_int(a.data_hi);
    let data = a.data_lo as string;
    let name = make_ref_name(len, data);
    return AddressRef { name: name };
}

def is_addr_ref(a: *Address): bool {
    return a.kind == MIR_ADDR_REF;
}

type AddressArg struct {
    idx: i32
}

def make_addr_arg(idx: i32, ty: *ty.Type): Address {
    let hi = std.int_to_ptr(idx);
    return create_addr(MIR_ADDR_ARG, ty, hi, null);
}

def as_addr_arg(a: *Address): AddressArg {
    let idx = std.ptr_to_int(a.data_hi);
    return AddressArg { idx: idx };
}

def is_addr_arg(a: *Address): bool {
    return a.kind == MIR_ADDR_ARG;
}

def create_addr_empty(): Address {
    return create_addr(MIR_ADDR_EMPTY, null, null, null);
}

def is_addr_empty(a: *Address): bool {
    return a.kind == MIR_ADDR_EMPTY;
}

def create_addr_null(ty: *ty.Type): Address {
    return create_addr(MIR_ADDR_NULL, ty, null, null);
}

def is_addr_null(a: *Address): bool {
    return a.kind == MIR_ADDR_NULL;
}

type Address struct {
    kind: i32,
    ty: *ty.Type,
    // this is basically a poor mans union, since the current compiler
    // implementation does not support unions
    // TODO(#75): replace this with real unions
    data_hi: *void,
    data_lo: *void
}

def create_addr(kind: i32, ty: *ty.Type, data_hi: *void, data_lo: *void): Address {
    return Address {
        kind: kind, ty: ty, data_hi: data_hi, data_lo: data_lo
    };
}

def addr_to_name(a: *Address): OwnedName {
    if is_addr_name(a) {
        let name = as_addr_name(a);
        return make_copied_name(name.value.len, name.value.data);
    }

    if is_addr_const(a) {
        let const = as_addr_const(a);
        let len = 0;
        let s = std.l_format_str(
            &len, "const %.*s", span.len(const.span), const.span.start
        );
        return make_owned_name(len, s);
    }

    if is_addr_global(a) {
        let global = as_addr_global(a);
        let len = 0;
        let s = std.l_format_str(
            &len, "global %.*s", global.name.len, global.name.data
        );
        return make_owned_name(len, s);
    }

    if is_addr_ref(a) {
        let ref = as_addr_ref(a);
        let len = 0;
        let s = std.l_format_str(
            &len, "&%.*s", ref.name.len, ref.name.data
        );
        return make_owned_name(len, s);
    }

    if is_addr_arg(a) {
        let arg = as_addr_arg(a);
        let len = 0;
        let s = std.l_format_str(
            &len, "getarg(%d)", arg.idx
        );
        return make_owned_name(len, s);
    }

    if is_addr_empty(a) {
        return make_copied_name(1, "_");
    }

    if is_addr_null(a) {
        return make_copied_name(4, "null");
    }

    return make_owned_name(0, null);
}

type ExprBinary struct {
    kind: i32,
    left: Address,
    right: Address
}

def new_expr_binary(kind: i32, left: Address, right: Address): Expression {
    let binary = (new ExprBinary { kind: kind, left: left, right: right }) as *void;
    return create_expr(MIR_EXPR_BINARY, binary);
}

def binary_kind_to_static_string(kind: i32): string {
    return mir_binary2str(kind);
}

def as_expr_binary(e: *Expression): *ExprBinary {
    return e.data as *ExprBinary;
}

def is_expr_binary(e: *Expression): bool {
    return e.kind == MIR_EXPR_BINARY;
}

type ExprUnary struct {
    kind: i32,
    addr: Address
}

def new_expr_unary_deref(addr: Address): Expression {
    let unary = (new ExprUnary { kind: MIR_UNARY_DEREF, addr: addr }) as *void;
    return create_expr(MIR_EXPR_UNARY, unary);
}

def new_expr_unary_num_neg(addr: Address): Expression {
    let unary = (new ExprUnary { kind: MIR_UNARY_NUM_NEG, addr: addr }) as *void;
    return create_expr(MIR_EXPR_UNARY, unary);
}

def new_expr_unary_bool_neg(addr: Address): Expression {
    let unary = (new ExprUnary { kind: MIR_UNARY_BOOL_NEG, addr: addr }) as *void;
    return create_expr(MIR_EXPR_UNARY, unary);
}

def unary_kind_to_static_string(kind: i32): string {
    return mir_unary2str(kind);
}

def as_expr_unary(e: *Expression): *ExprUnary {
    return e.data as *ExprUnary;
}

def is_expr_unary(e: *Expression): bool {
    return e.kind == MIR_EXPR_UNARY;
}

type ExprCopy struct {
    addr: Address
}

def new_expr_copy(addr: Address): Expression {
    let cpy = (new ExprCopy { addr: addr }) as *void;
    return create_expr(MIR_EXPR_COPY, cpy);
}

def as_expr_copy(e: *Expression): *ExprCopy {
    return e.data as *ExprCopy;
}

def is_expr_copy(e: *Expression): bool {
    return e.kind == MIR_EXPR_COPY;
}

type ExprCall struct {
    callee: Address,
    args: vec.Vec, // Vec<Address>
    varargs: bool
}

def new_expr_call(callee: Address, args: vec.Vec, varargs: bool): Expression {
    let call = (new ExprCall { callee: callee, args: args, varargs: varargs });
    return create_expr(MIR_EXPR_CALL, call as *void);
}

def call_arg_at(call: *ExprCall, idx: i32): *Address {
    return vec.get_ptr(&call.args, idx) as *Address;
}

def as_expr_call(e: *Expression): *ExprCall {
    return e.data as *ExprCall;
}

def is_expr_call(e: *Expression): bool {
    return e.kind == MIR_EXPR_CALL;
}

type ExprGep struct {
    addr: Address,
    idx: i32
}

def new_expr_gep(addr: Address, idx: i32): Expression {
    let gep = (new ExprGep { addr: addr, idx: idx }) as *void;
    return create_expr(MIR_EXPR_GEP, gep);
}

def as_expr_gep(e: *Expression): *ExprGep {
    return e.data as *ExprGep;
}

def is_expr_gep(e: *Expression): bool {
    return e.kind == MIR_EXPR_GEP;
}

type ExprStructInit struct {
    name: RefName,
    args: vec.Vec // Vec<Address>
}

def new_expr_struct_init(name: RefName, args: vec.Vec): Expression {
    let init = (new ExprStructInit { name: name, args: args }) as *void;
    return create_expr(MIR_EXPR_STRUCTINIT, init);
}

def init_arg_at(init: *ExprStructInit, idx: i32): *Address {
    return vec.get_ptr(&init.args, idx) as *Address;
}

def as_expr_struct_init(e: *Expression): *ExprStructInit {
    return e.data as *ExprStructInit;
}

def is_expr_struct_init(e: *Expression): bool {
    return e.kind == MIR_EXPR_STRUCTINIT;
}

type ExprNew struct {
    addr: Address
}

def new_expr_new(addr: Address): Expression {
    let new_e = (new ExprNew { addr: addr }) as *void;
    return create_expr(MIR_EXPR_NEW, new_e);
}

def as_expr_new(e: *Expression): *ExprNew {
    return e.data as *ExprNew;
}

def is_expr_new(e: *Expression): bool {
    return e.kind == MIR_EXPR_NEW;
}

type ExprSizeOf struct {
    ty: *ty.Type
}

def new_expr_sizeof(t: *ty.Type): Expression {
    let so = (new ExprSizeOf { ty: t }) as *void;
    return create_expr(MIR_EXPR_SIZEOF, so);
}

def as_expr_sizeof(e: *Expression): *ExprSizeOf {
    return e.data as *ExprSizeOf;
}

def is_expr_sizeof(e: *Expression): bool {
    return e.kind == MIR_EXPR_SIZEOF;
}

type ExprBitCast struct {
    addr: Address,
    into: *ty.Type
}

def new_expr_bitcast(addr: Address, into: *ty.Type): Expression {
    let cast = (new ExprBitCast { addr: addr, into: into }) as *void;
    return create_expr(MIR_EXPR_BITCAST, cast);
}

def as_expr_bitcast(e: *Expression): *ExprBitCast {
    return e.data as *ExprBitCast;
}

def is_expr_bitcast(e: *Expression): bool {
    return e.kind == MIR_EXPR_BITCAST;
}

// An expression is always on the right side of an assignment instruction
// In the comments, this assignment is denoted as 'x = '
//
// x = y op z:
//  Binary(Address, BinaryType, Address)
// x = op y
//  Unary(UnaryType, Address),
// x = y:
//  Copy(Address),
// x = call f (y, z):
//  Call(RefName, Vec<Address>, varargs: bool)
// Gets a pointer to the Xth element of a struct or array
// x = base + offset:
//  StructGep(Address, i32)
// x = test { 41, "test" }:
//  StructInit(RefName, Vec<Address>),
// allocates the value of its address on the heap
// x = new 5:
//  New(Address),
// x = sizeof(ty):
//  SizeOf(*ty.Type),
// x = param #y:
//  GetParam(i32),
// Cast the value at the address to the supplied type
// x = bitcast e to ty2:
//  BitCast(Address, Type),
type Expression struct {
    kind: i32,
    data: *void
}

def create_expr(kind: i32, data: *void): Expression {
    return Expression {kind: kind, data: data};
}

def empty_expr(): Expression {
    return create_expr(0, null);
}

def free_expr(e: *Expression): void {
    if is_expr_call(e) {
        let c_expr = as_expr_call(e);
        vec.free_v(&c_expr.args);
    } else if is_expr_struct_init(e) {
        let i_expr = as_expr_struct_init(e);
        vec.free_v(&i_expr.args);
    }

    if e.data != null {
        delete e.data;
    }
}

def expr_to_name(e: *Expression): OwnedName {
    if is_expr_binary(e) {
        let bin = as_expr_binary(e);

        let left = addr_to_name(&bin.left);
        let right = addr_to_name(&bin.right);
        let op = binary_kind_to_static_string(bin.kind);

        let len = 0;
        let s = std.l_format_str(
            &len, "(%.*s)%s(%.*s)", left.len, left.data, op, right.len, right.data
        );

        free_name(&left);
        free_name(&right);
        return make_owned_name(len, s);
    }

    if is_expr_unary(e) {
        let unary = as_expr_unary(e);

        let addr = addr_to_name(&unary.addr);
        let op = unary_kind_to_static_string(unary.kind);

        let len = 0;
        let s = std.l_format_str(&len, "%s(%.*s)", op, addr.len, addr.data);

        free_name(&addr);
        return make_owned_name(len, s);
    }

    if is_expr_copy(e) {
        let copy = as_expr_copy(e);

        let addr = addr_to_name(&copy.addr);
        let len = 0;
        let s = std.l_format_str(&len, "copy %.*s", addr.len, addr.data);

        free_name(&addr);
        return make_owned_name(len, s);
    }

    if is_expr_call(e) {
        let call = as_expr_call(e);

        let buf = str.create_buf();

        let i = 0;
        while i < call.args.len {
            let arg = call_arg_at(call, i);
            let arg_n = addr_to_name(arg);

            str.append(&buf, arg_n.len, arg_n.data);
            if i < call.args.len - 1 {
                str.append(&buf, 2, ", ");
            }

            free_name(&arg_n);
            i = i + 1;
        }

        let name = addr_to_name(&call.callee);
        let len = 0;
        let s = std.l_format_str(
            &len, "%.*s(%s)", name.len, name.data, buf.content
        );
        free_name(&name);

        str.free_buf(&buf);
        return make_owned_name(len, s);
    }

    if is_expr_gep(e) {
        let gep = as_expr_gep(e);
        let addr_n = addr_to_name(&gep.addr);

        let len = 0;
        let s = std.l_format_str(
            &len, "gep(%.*s, %d)", addr_n.len, addr_n.data, gep.idx
        );

        free_name(&addr_n);
        return make_owned_name(len, s);
    }

    if is_expr_struct_init(e) {
        let init = as_expr_struct_init(e);

        let buf = str.create_buf();

        let i = 0;
        while i < init.args.len {
            let arg = init_arg_at(init, i);
            let arg_n = addr_to_name(arg);

            str.append(&buf, arg_n.len, arg_n.data);
            if i < init.args.len - 1 {
                str.append(&buf, 2, ", ");
            }

            free_name(&arg_n);
            i = i + 1;
        }

        let name = init.name;
        let len = 0;
        let s = std.l_format_str(
            &len, "%.*s{%s}", name.len, name.data, buf.content
        );

        str.free_buf(&buf);
        return make_owned_name(len, s);
    }

    if is_expr_new(e) {
        let n = as_expr_new(e);
        let addr_n = addr_to_name(&n.addr);

        let len = 0;
        let s = std.l_format_str(&len, "new %.*s", addr_n.len, addr_n.data);

        free_name(&addr_n);
        return make_owned_name(len, s);
    }

    if is_expr_sizeof(e) {
        let so = as_expr_sizeof(e);
        let ty_s: string = null;
        let free_ty_s = ty.to_string(so.ty, &ty_s);

        let len = 0;
        let s = std.l_format_str(&len, "sizeof(%s)", ty_s);

        if free_ty_s {
            delete ty_s;
        }
        return make_owned_name(len, s);
    }

    if is_expr_bitcast(e) {
        let cast = as_expr_bitcast(e);
        let addr_n = addr_to_name(&cast.addr);
        let ty_s: string = null;
        let free_ty_s = ty.to_string(cast.into, &ty_s);

        let len = 0;
        let s = std.l_format_str(
            &len, "(%.*s as %s)", addr_n.len, addr_n.data, ty_s
        );

        free_name(&addr_n);
        if free_ty_s {
            delete ty_s;
        }

        return make_owned_name(len, s);
    }

    return make_owned_name(0, null);
}

type InstDecl struct {
    name: RefName, // The nametable owns the actual name
    ty: *ty.Type
}

def new_inst_decl(meta: MetaData, name: RefName, ty: *ty.Type): Inst {
    return Inst {
        kind: MIR_INST_DECL,
        meta: meta,
        data: (new InstDecl {name: name, ty: ty}) as *void
    };
}

def is_inst_decl(inst: *Inst): bool {
    return inst.kind == MIR_INST_DECL;
}

def as_inst_decl(inst: *Inst): *InstDecl {
    return inst.data as *InstDecl;
}

type InstAssign struct {
    dest: Address,
    value: Expression
}

def new_inst_assign(meta: MetaData, dest: Address, value: Expression, t: *ty.Type): Inst {
    return Inst {
        kind: MIR_INST_ASSIGN,
        meta: meta,
        data: (new InstAssign { dest: dest, value: value }) as *void
    };
}

def is_inst_assign(inst: *Inst): bool {
    return inst.kind == MIR_INST_ASSIGN;
}

def as_inst_assign(inst: *Inst): *InstAssign {
    return inst.data as *InstAssign;
}

type InstJmp struct {
    target: Label
}

def new_inst_jmp(meta: MetaData, target: Label): Inst {
    return Inst {
        kind: MIR_INST_JMP,
        meta: meta,
        data: (new InstJmp {target: target}) as *void
    };
}

def is_inst_jmp(inst: *Inst): bool {
    return inst.kind == MIR_INST_JMP;
}

def as_inst_jmp(inst: *Inst): *InstJmp {
    return inst.data as *InstJmp;
}

type InstJmpIf struct {
    condition: Address,
    if_target: Label,
    else_target: Label
}

def new_inst_jmpif(
    meta: MetaData,
    condition: Address,
    if_target: Label,
    else_target: Label
): Inst {
    return Inst {
        kind: MIR_INST_JMPIF,
        meta: meta,
        data: (new InstJmpIf {
            condition: condition, if_target: if_target, else_target: else_target
        }) as *void
    };
}


def is_inst_jmpif(inst: *Inst): bool {
    return inst.kind == MIR_INST_JMPIF;
}

def as_inst_jmpif(inst: *Inst): *InstJmpIf {
    return inst.data as *InstJmpIf;
}

type InstReturn struct {
    value: Address // MIR_ADDR_EMPTY if empty return: 'return;'
}

def new_inst_return(meta: MetaData): Inst {
    return new_inst_return_value(meta, create_addr_empty());
}

def new_inst_return_value(meta: MetaData, value: Address): Inst {
    return Inst {
        kind: MIR_INST_RETURN,
        meta: meta,
        data: (new InstReturn { value: value }) as *void
    };
}

def is_inst_return(inst: *Inst): bool {
    return inst.kind == MIR_INST_RETURN;
}

def as_inst_return(inst: *Inst): *InstReturn {
    return inst.data as *InstReturn;
}

type InstLabel struct {
    value: Label
}

def new_inst_label(meta: MetaData, value: Label): Inst {
    return Inst {
        kind: MIR_INST_LABEL,
        meta: meta,
        data: (new InstLabel { value: value }) as *void
    };
}

def is_inst_label(inst: *Inst): bool {
    return inst.kind == MIR_INST_LABEL;
}

def as_inst_label(inst: *Inst): *InstLabel {
    return inst.data as *InstLabel;
}

type InstDelete struct {
    addr: Address
}

def new_inst_delete(meta: MetaData, target: Address): Inst {
    return Inst {
        kind: MIR_INST_DELETE,
        meta: meta,
        data: (new InstDelete { addr: target }) as *void
    };
}

def is_inst_delete(inst: *Inst): bool {
    return inst.kind == MIR_INST_DELETE;
}

def as_inst_delete(inst: *Inst): *InstDelete {
    return inst.data as *InstDelete;
}

def create_inst_nop(): Inst {
    return Inst {
        kind: MIR_INST_NOP,
        meta: create_meta(source.empty_pos()),
        data: null
    };
}

def is_inst_nop(inst: *Inst): bool {
    return inst.kind == MIR_INST_NOP;
}

// A single MIR instruction
//
// can be one of the following
// let x: i32:
//  Decl(RefName, Type),
// x = <expr>:
//  Assignment(Address, Expr),
// goto l:
//  Jmp(Label),
// if x goto l0 else goto l1:
//  JmpIf(Address, Label, Label),
// return x:
//  Return(Optional Address),
// .L0:
//  Label(Label),
// frees heap memory:
//  Delete(Address),
// No operation:
//  Nop,
type Inst struct {
    kind: i32,
    meta: MetaData,
    data: *void
}

def inst_changes_ip(inst: *Inst): bool {
    return is_inst_jmp(inst) || is_inst_jmpif(inst) || is_inst_return(inst);
}

def inst_to_name(inst: *Inst): OwnedName {
    if is_inst_decl(inst) {
        let decl = as_inst_decl(inst);
        let ty_s: string = null;
        let free_ty_s = ty.to_string(decl.ty, &ty_s);

        let len = 0;
        let s = std.l_format_str(
            &len,
            "let %.*s: %s",
            decl.name.len,
            decl.name.data,
            ty_s
        );

        if free_ty_s {
            delete ty_s;
        }

        return make_owned_name(len, s);
    }

    if is_inst_assign(inst) {
        let assign = as_inst_assign(inst);
        let a_n = addr_to_name(&assign.dest);
        let e_n = expr_to_name(&assign.value);

        let ty_s: string = "void";
        let free_ty_s = false;
        if !is_addr_empty(&assign.dest) {
            free_ty_s = ty.to_string(assign.dest.ty, &ty_s);
        }

        let len = 0;
        let s = std.l_format_str(
            &len,
            "%.*s: %s = %.*s", a_n.len, a_n.data, ty_s, e_n.len, e_n.data
        );

        if free_ty_s {
            delete ty_s;
        }

        free_name(&a_n);
        free_name(&e_n);

        return make_owned_name(len, s);
    }

    if is_inst_jmp(inst) {
        let jmp = as_inst_jmp(inst);
        let label = label_name(&jmp.target);

        let len = 0;
        let s = std.l_format_str(
            &len, "jmp %.*s", label.len, label.data
        );

        return make_owned_name(len, s);
    }

    if is_inst_jmpif(inst) {
        let jmpif = as_inst_jmpif(inst);
        let if_label = label_name(&jmpif.if_target);
        let else_label = label_name(&jmpif.else_target);
        let condition = addr_to_name(&jmpif.condition);

        let len = 0;
        let s = std.l_format_str(
            &len,
            "jmpif %.*s;%.*s;%.*s",
            condition.len,
            condition.data,
            if_label.len,
            if_label.data,
            else_label.len,
            else_label.data
        );

        free_name(&condition);
        return make_owned_name(len, s);
    }

    if is_inst_return(inst) {
        let ret = as_inst_return(inst);
        if is_addr_empty(&ret.value) {
            return make_copied_name(6, "return");
        }

        let a_n = addr_to_name(&ret.value);
        let len = 0;
        let s = std.l_format_str(&len, "return %.*s", a_n.len, a_n.data);

        free_name(&a_n);
        return make_owned_name(len, s);
    }

    if is_inst_delete(inst) {
        let del = as_inst_delete(inst);
        let a_n = addr_to_name(&del.addr);

        let len = 0;
        let s = std.l_format_str(&len, "delete %.*s", a_n.len, a_n.data);

        free_name(&a_n);
        return make_owned_name(len, s);
    }

    if is_inst_nop(inst) {
        return make_copied_name(3, "nop");
    }

    return make_owned_name(0, null);
}

def free_inst(inst: *Inst): void {
    if is_inst_assign(inst) {
        let assign = as_inst_assign(inst);
        free_expr(&assign.value);
    } if is_inst_jmp(inst) {
        let jmp = as_inst_jmp(inst);
        free_label(&jmp.target);
    } if is_inst_jmpif(inst) {
        let jmpif = as_inst_jmpif(inst);
        free_label(&jmpif.if_target);
        free_label(&jmpif.else_target);
    } if is_inst_label(inst) {
        let label = as_inst_label(inst);
        free_label(&label.value);
    }

    if inst.data != null {
        delete inst.data;
    }
}

type BlockMap struct {
    blocks: vmap.Map, // vmap.Map<RefName, BasicBlock>
    decls: vec.Vec    // vec.Vec<Inst>
}

def create_block_map(func_name: RefName): BlockMap {
    let bm = BlockMap {
        blocks: vmap.create(sizeof BasicBlock),
        decls: vec.create(sizeof Inst)
    };

    let name = make_copied_name(func_name.len, func_name.data);
    let bb = create_bb(create_label(name));

    bm_push_block(&bm, &bb);

    return bm;
}

def bm_push_block(bm: *BlockMap, bb: *BasicBlock): void {
    let name = label_name(&bb.label);
    let key = map.create_key(name.len, name.data);
    vmap.insert(&bm.blocks, key, bb as *void);
}

def free_block_map(bm: *BlockMap): void {
    let i = 0;
    while i < vmap.len(&bm.blocks) {
        free_bb(vmap.get_ptr_idx(&bm.blocks, i) as *BasicBlock);
        i = i + 1;
    }

    vmap.free_m(&bm.blocks);

    i = 0;
    while i < bm.decls.len {
        free_inst(vec.get_ptr(&bm.decls, i) as *Inst);
        i = i + 1;
    }

    vec.free_v(&bm.decls);
}

def bm_get_bb_ptr(bm: *BlockMap, idx: i32): *BasicBlock {
    return vmap.get_ptr_idx(&bm.blocks, idx) as *BasicBlock;
}

def bm_last_bb_ptr(bm: *BlockMap): *BasicBlock {
    return bm_get_bb_ptr(bm, vmap.len(&bm.blocks) - 1);
}

def bm_push_instr_to_last_bb(bm: *BlockMap, inst: *Inst): void {
    let last_bb = bm_last_bb_ptr(bm);
    bb_push_instr(last_bb, inst);
}

def bm_push_new_block(bm: *BlockMap): void {
    let label_len = 0;
    // TODO(#79): this id is not unique across modules
    let label = std.l_format_str(&label_len, ".block%d", vmap.len(&bm.blocks));
    let new_bb = create_bb(create_label(make_owned_name(label_len, label)));
    bm_push_block(bm, &new_bb);
}

def bm_push_new_labeled_block(bm: *BlockMap, label: Label): void {
    let new_bb = create_bb(label);
    bm_push_block(bm, &new_bb);
}

def bm_push_instr(bm: *BlockMap, inst: *Inst): void {
    // the last blocks was already closed, so we need to open a new one

    if is_inst_decl(inst) {
        vec.push(&bm.decls, inst as *void);
        return;
    }

    if is_inst_label(inst) {
        if is_inst_nop(&bm_last_bb_ptr(bm).terminator) {
            // Terminate last block with goto
            let target = clone_label(&as_inst_label(inst).value);
            let goto = new_inst_jmp(inst.meta, target);
            let last_bb = bm_last_bb_ptr(bm);
            last_bb.terminator = goto;
        }

        bm_push_new_labeled_block(bm, as_inst_label(inst).value);
        // the instruction iteself is now useless, since we moved the value out
        delete inst.data;
        return;
    }

    if inst_changes_ip(inst) {
        let last_bb = bm_last_bb_ptr(bm);
        // don't overwrite terminators
        if is_inst_nop(&last_bb.terminator) {
            last_bb.terminator = *inst;
        } else {
            free_inst(inst);
        }
        return;
    }

    bm_push_instr_to_last_bb(bm, inst);
}

// dump BlockMap to stdout for debug purposes
def bm_dump(bm: *BlockMap): void {
    let first_bb = vmap.get_ptr_idx(&bm.blocks, 0) as *BasicBlock;
    let name = label_name(&first_bb.label);
    io.printf("%.*s:\n", name.len, name.data);

    let i = 0;
    while i < bm.decls.len {
        let decl = vec.get_ptr(&bm.decls, i) as *Inst;
        let n = inst_to_name(decl);
        io.printf("  %.*s\n", n.len, n.data);
        free_name(&n);
        i =  i + 1;
    }

    i = 0;
    while i < vmap.len(&bm.blocks) {
        let bb = vmap.get_ptr_idx(&bm.blocks, i) as *BasicBlock;

        let bb_name = label_name(&bb.label);
        if bb_name.data != name.data {
            io.printf("label: %.*s:\n", bb_name.len, bb_name.data);
        }

        let j = 0;
        while j < bb_num_instr(bb) {
            let inst = bb_get_instr(bb, j);
            let n = inst_to_name(inst);
            io.printf("  %.*s\n", n.len, n.data);
            free_name(&n);
            j = j + 1;
        }

        let n = inst_to_name(&bb.terminator);
        io.printf("  term: %.*s\n", n.len, n.data);
        free_name(&n);

        i = i + 1;
    }
}
