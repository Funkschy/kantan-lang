#include "std.h"

import "io";
import "ty";
import "nt";
import "mod";
import "mir";
import "ast";
import "map";
import "std";
import "dbg";
import "span";
import "path";
import "scope";
import "ident";
import "source";
import "ptrvec";

// TODO(#62): implement mir compiler

// Data which is shared between all the MirCompiler instances
type CompilationData struct {
    mods: *mod.Map,
    proj_root: path.Path,
    global_types: map.Map // map.Map<ident.Ident, *ty.Type>
}

def compile_all(data: CompilationData, types: ptrvec.Vec): void {
    // TODO(#64): the mir compilation can be done in parallel
    let i = 0;
    let n = mod.num_mods(data.mods);
    while i < n {
        let m = mod.get_mod(data.mods, i);

        let mirc = create_mirc(m, &data);
        let mir_mod = compile(&mirc);

        free_mirc(&mirc);
        mir.free_mod(&mir_mod);

        i = i + 1;
    }
}

// Compiles a single *mod.Module to a mir.Module
type MirCompiler struct {
    mod: *mod.Module,
    data: *CompilationData,
    names: nt.NameTable,
    functions: map.Map, // map.Map<mir.Name, *mir.Func>
    globals: map.Map, // map.Map<mir.Name, mir.GlobalConst>
    current_func: *mir.Func
}

def create_mirc(m: *mod.Module, data: *CompilationData): MirCompiler {
    return MirCompiler {
        mod: m,
        data: data,
        names: nt.create(),
        functions: map.create(),
        globals: map.create(),
        current_func: null
    };
}

def free_mirc(c: *MirCompiler): void {
    nt.free_nt(&c.names);

    // free function names
    let f_iter = map.iter(&c.functions);
    let item = map.iter_next(&f_iter);
    while item != null {
        // this map owns its names, so this is basically just a transmute
        let name = mir.make_owned_name(item.key.len, item.key.value);
        mir.free_name(&name);
        let f = item.value as *mir.Func;
        mir.free_func(f);
        delete f;

        item = map.iter_next(&f_iter);
    }
}

def compile(c: *MirCompiler): mir.Module {
    let i = 0;
    let n = mod.num_stmts(c.mod);

    nt.open_scope(&c.names);

    while i < n {
        let s = mod.get_stmt_at(c.mod, i);
        compile_stmt(c, s);
        i = i + 1;
    }

    nt.close_scope(&c.names);

    return mir.create_mod(c.globals, c.functions);
}

def add_function(c: *MirCompiler, f: *mir.Func, n: mir.Name): void {
    dbg.assert(n.owned, "Function name should be owned");
    let key = map.create_key(n.len, n.data);
    map.insert(&c.functions, key, f as *void);
}

def get_meta(c: *MirCompiler, s: span.Span): mir.MetaData {
    let pos = source.span_to_pos(c.mod.source, s);
    return mir.create_meta(pos);
}

def compile_stmt(c: *MirCompiler, s: *ast.Stmt): void {
    if ast.is_func_decl_stmt(s) {
        let decl_stmt = ast.as_func_decl_stmt(s);
        let decl = &decl_stmt.decl;

        let name = mangle_func_name(c, &decl.name, decl.func_ty);
        let name_ref = mir.ref_name(name.len, name.data);
        let mir_func = new mir.create_func(decl.func_ty, name_ref);

        if decl_stmt.block != null {
            let prev_func = c.current_func;

            c.current_func = mir_func;
            compile_stmt(c, decl_stmt.block as *ast.Stmt);
            c.current_func = prev_func;
        }

        add_function(c, mir_func, name);
        mir.bm_dump(&mir_func.blocks);
        return;
    }

    if ast.is_block_stmt(s) {
        dbg.assert(c.current_func != null, "current_func was null");

        let block_stmt = ast.as_block_stmt(s);
        bind_s(c, 5, "block");

        nt.open_scope(&c.names);

        let i = 0;
        while i < block_stmt.stmts.len {
            let s = ast.stmt_at(block_stmt, i);
            compile_stmt(c, s);
            i = i + 1;
        }

        nt.close_scope(&c.names);

        return;
    }

    if ast.is_let_stmt(s) {
        let let_stmt = ast.as_let_stmt(s);

        let a = mir.create_addr_empty();
        let mir_expr = mir.empty_expr();

        if address_expression(c, let_stmt.value, &a) {
            mir_expr = mir.new_copy_expr(a);
        } else {
            mir_expr = compile_expression(c, let_stmt.value);
        }

        bind_ident(c, &let_stmt.ident);
        mir.free_expr(&mir_expr);

        // TODO(#73): implement logic for global variables
        if c.current_func != null {
            let meta = get_meta(c, s.span);
            let decl = mir.new_inst_decl(
                meta, name_from_ident(&let_stmt.ident), let_stmt.value.ty
            );
            mir.func_push_instr(c.current_func, &decl);
        }

        // TODO(#74): push assign instruction here
        return;
    }

    if ast.is_expr_stmt(s) {
        let e = ast.as_expr_stmt(s);
        let a = add_expr_instruction(c, e.expr);
        mir.free_addr(&a);
        return;
    }
}

def dump_function(f: *mir.Func): void {

}

def bind_ident(c: *MirCompiler, i: *ident.Ident): void {
    nt.bind(&c.names, mir.ref_name(ident.len(i), ident.start(i)));
}

def bind_s(c: *MirCompiler, len: i32, s: string): void {
    nt.bind(&c.names, mir.ref_name(len, s));
}

def mod_at(c: *MirCompiler, i: i32): *mod.Module {
    return mod.get_mod(c.data.mods, i);
}

def compile_expression(c: *MirCompiler, e: *ast.Expr): mir.Expression {
    return mir.Expression { kind: 0, data: null };
}

// checks if the supplied expression is an "address expression", so either
// a name, or an rvalue. If it is, returns true and fills the out parameter
// with the correct address
def address_expression(c: *MirCompiler, e: *ast.Expr, out: *mir.Address): bool {
    if ast.is_ident_expr(e) {
        let ident = &ast.as_ident_expr(e).ident;
        let name = name_from_ident(ident);
        let mangled = mir.empty_name();
        if nt.lookup(&c.names, name, &mangled) {
            io.printf(
                "demangled %.*s to %.*s\n",
                mangled.len, mangled.data, name.len, name.data
            );
            *out = mir.new_addr_name(mangled, e.ty);
            return true;
        }
    }

    return rvalue_expr(c, e, out);
}

// creates one or multiple instructions for the given expression and returns
// the address of the result
def add_expr_instruction(c: *MirCompiler, e: *ast.Expr): mir.Address {
    let a = mir.create_addr_empty();
    if address_expression(c, e, &a) {
        return a;
    }

    let mir_expr = compile_expression(c, e);
    if mir.is_expr_copy(&mir_expr) {
        return mir.as_expr_copy(&mir_expr).addr;
    }

    return mir.create_addr_null(null);
}

// Checks if the expression (e) is a rvalue. If it is, the out_address is filled
// with the correct mir.Address for this value
// (e.g. AddressConst for an int literal)
def rvalue_expr(c: *MirCompiler, e: *ast.Expr, out: *mir.Address): bool {
    if ast.is_int_expr(e) {
        *out = mir.new_addr_const(e.ty, e.span);
        return true;
    }

    if ast.is_float_expr(e) {
        *out = mir.new_addr_const(e.ty, e.span);
        return true;
    }

    if ast.is_null_expr(e) {
        *out = mir.create_addr_null(e.ty);
        return true;
    }

    if ast.is_string_expr(e) {
        let name = string_lit(c, e);
        *out = mir.new_address_global(name, e.ty);
        return true;
    }

    if ast.is_char_expr(e) {
        *out = mir.new_addr_const(e.ty, e.span);
        return true;
    }

    return false;
}

def string_lit(c: *MirCompiler, e: *ast.Expr): mir.Name {
    return add_global(c, mir.create_global_data(e.span, e.ty));
}

def add_global(c: *MirCompiler, data: mir.GlobalData): mir.Name {
    return mir.ref_name(0, null);
}

def mangle_func_name(c: *MirCompiler, name: *ident.Ident, t: *ty.Type): mir.Name {
    dbg.assert(t != null, "type was null");
    dbg.assert(ty.is_func(t), "type was not a function");

    let f_ty = ty.as_func(t);
    let declared_in = mod_at(c, f_ty.declared_in);

    if f_ty.is_extern {
        // function names must be owned, so just copy data here
        // there aren't many extern functions anyway
        let len = ident.len(name);
        let data = std.strndup(ident.start(name), len);
        return mir.make_owned_name(len, data);
    }

    return mangle_name(c, name, declared_in);
}

def mangle_struct_name(c: *MirCompiler, name: *ident.Ident, t: *ty.Type): mir.Name {
    dbg.assert(t != null, "type was null");
    dbg.assert(ty.is_struct(t), "type was not a struct");

    let s_ty = ty.as_struct(t);
    let declared_in = mod_at(c, s_ty.declared_in);

    return mangle_name(c, name, declared_in);
}

def mangle_name(c: *MirCompiler, name: *ident.Ident, declared_in: *mod.Module): mir.Name {
    let name_len = 0;
    let name_data = "";
    let p = mod.get_path(declared_in);

    // TODO(#72): this name mangling algorithm assumes the existence of a global
    //  file path root. This does not necessarily exist in windows

    let file_ending_len = 0;
    mod.kantan_file_ending(&file_ending_len);

    if !mod.is_std_lib(declared_in) {
        let mod_len = p.len - c.data.proj_root.len - file_ending_len;
        let mod_name = p.inner + c.data.proj_root.len;

        // +1 for '.'
        name_len = mod_len + ident.len(name) + 1;
        name_data = std.malloc(name_len + 1) as string;

        let i = 0;
        let sep = path.sys_separator();
        while i < mod_len {
            let c = *(mod_name + i);
            if c == sep {
                c = '.';
            }
            *(name_data + i) = c;
            i = i + 1;
        }
        *(name_data + mod_len) = '.';

        let dest = name_data + mod_len + 1;
        let src = ident.start(name);
        std.memcpy(dest as *void, src as *void, ident.len(name));
        *(name_data + name_len) = '\0';
    } else {
        let file_name_len = p.len - file_ending_len;
        let file_name = p.inner;

        name_len = 4 + file_name_len + 1 + ident.len(name);
        name_data = std.format_str(
            "std.%.*s.%.*s", file_name_len, file_name, ident.len(name), ident.start(name)
        );
    }

    return mir.make_owned_name(name_len, name_data);
}

def name_from_ident(i: *ident.Ident): mir.Name {
    return mir.ref_name(ident.len(i), ident.start(i));
}
