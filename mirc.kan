#include "std.h"

import "ty";
import "nt";
import "mod";
import "mir";
import "ast";
import "map";
import "std";
import "dbg";
import "path";
import "scope";
import "ident";
import "ptrvec";

// TODO(#62): implement mir compiler

// Data which is shared between all the MirCompiler instances
type CompilationData struct {
    mods: *mod.Map,
    proj_root: path.Path,
    global_types: map.Map // map.Map<ident.Ident, *ty.Type>
}

def compile_all(data: CompilationData, types: ptrvec.Vec): void {
    // TODO(#64): the mir compilation can be done in parallel
    let i = 0;
    let n = mod.num_mods(data.mods);
    while i < n {
        let m = mod.get_mod(data.mods, i);

        let mirc = create_mirc(m, &data);
        compile(&mirc);
        free_mirc(&mirc);

        i = i + 1;
    }
}

// Compiles a single *mod.Module to a mir.Module
type MirCompiler struct {
    mod: *mod.Module,
    data: *CompilationData,
    globals: map.Map // map.Map<mir.Name, mir.GlobalConst>
}

def create_mirc(m: *mod.Module, data: *CompilationData): MirCompiler {
    return MirCompiler {
        mod: m,
        data: data,
        globals: map.create()
    };
}

def free_mirc(c: *MirCompiler): void {}

def compile(c: *MirCompiler): mir.Module {
    let i = 0;
    let n = mod.num_stmts(c.mod);
    while i < n {
        let s = mod.get_stmt_at(c.mod, i);
        compile_stmt(c, s);
        i = i + 1;
    }

    return mir.create_mod(c.globals, mir.create_inst_block());
}

def compile_stmt(c: *MirCompiler, s: *ast.Stmt): void {
    if ast.is_func_decl_stmt(s) {
        let decl_stmt = ast.as_func_decl_stmt(s);
        let decl = &decl_stmt.decl;

        let name = mangle_func_name(c, &decl.name, decl.func_ty);
        io.printf("name: %.*s\n", name.len, name.data);
        mir.free_name(&name);
    }
}

def mod_at(c: *MirCompiler, i: i32): *mod.Module {
    return mod.get_mod(c.data.mods, i);
}

def add_expr(c: *MirCompiler, b: *mir.InstBlock, e: *ast.Expr): mir.Address {
    if ast.is_ident_expr(e) {
        // TODO: lookup
        dbg.not_implemented();
    }

    let a = mir.create_addr_empty();
    if rvalue_expr(c, e, &a) {
        return a;
    }

    return mir.create_addr_null(null);
}

// Checks if the expression (e) is a rvalue. If it is, the out_address is filled
// with the correct mir.Address for this value
// (e.g. AddressConst for an int literal)
def rvalue_expr(c: *MirCompiler, e: *ast.Expr, out: *mir.Address): bool {
    if ast.is_int_expr(e) {
        *out = mir.create_addr_const(e.ty, e.span);
        return true;
    }

    if ast.is_float_expr(e) {
        *out = mir.create_addr_const(e.ty, e.span);
        return true;
    }

    if ast.is_null_expr(e) {
        *out = mir.create_addr_null(e.ty);
        return true;
    }

    if ast.is_string_expr(e) {
        let name = string_lit(c, e);
        *out = mir.new_address_global(name, e.ty);
        return true;
    }

    if ast.is_char_expr(e) {
        *out = mir.create_addr_const(e.ty, e.span);
        return true;
    }

    return false;
}

def string_lit(c: *MirCompiler, e: *ast.Expr): mir.Name {
    return add_global(c, mir.create_global_data(e.span, e.ty));
}

def add_global(c: *MirCompiler, data: mir.GlobalData): mir.Name {
    return mir.ref_name(0, null);
}

def mangle_func_name(c: *MirCompiler, name: *ident.Ident, t: *ty.Type): mir.Name {
    dbg.assert(t != null, "type was null");
    dbg.assert(ty.is_func(t), "type was not a function");

    let f_ty = ty.as_func(t);
    let declared_in = mod_at(c, f_ty.declared_in);
    // TODO(#65): implement function name mangling

    if !declared_in.is_std_lib {
        let p = declared_in.path;

        let file_ending_len = 0;
        mod.kantan_file_ending(&file_ending_len);

        let mod_len = p.len - c.data.proj_root.len - file_ending_len;
        let mod_name = p.inner + c.data.proj_root.len;

        // +1 for '.'
        let len = mod_len + ident.len(name) + 1;
        let name_data = std.malloc(len + 1) as string;
        io.printf("%.*s/%.*s\n", p.len, p.inner, ident.len(name), ident.start(name));

        let i = 0;
        let sep = path.sys_separator();
        while i < mod_len {
            let c = *(mod_name + i);
            if c == sep {
                c = '.';
            }
            *(name_data + i) = c;
            i = i + 1;
        }
        *(name_data + mod_len) = '.';

        let dest = name_data + mod_len + 1;
        let src = ident.start(name);
        std.memcpy(dest as *void, src as *void, ident.len(name));
        *(name_data + len) = '\0';

        return mir.make_owned_name(len, name_data);
    }

    return ident_to_mir_name(name);
}

def mangle_struct_name(c: *MirCompiler, name: *ident.Ident, t: *ty.Type): mir.Name {
    dbg.assert(t != null, "type was null");
    dbg.assert(ty.is_struct(t), "type was not a struct");

    let s_ty = ty.as_struct(t);
    let declared_in = mod_at(c, s_ty.declared_in);
    // TODO(#66): implement struct name mangling

    return ident_to_mir_name(name);
}

def ident_to_mir_name(i: *ident.Ident): mir.Name {
    return mir.ref_name(ident.len(i), ident.start(i));
}

