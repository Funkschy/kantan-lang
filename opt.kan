import "io";

import "std";
import "ptrvec";

type Options struct {
    had_errors: bool,
    exit_immediately: bool,
    debug_info: bool,
    files: ptrvec.Vec,
    opt_level: i8,
    output_filename: string,
    target_os: string
}

def parse(argc: i32, argv: *string): Options {
    let options = Options {
        had_errors: false,
        exit_immediately: false,
        debug_info: false,
        files: ptrvec.with_cap(argc),
        opt_level: 0,
        output_filename: null,
        target_os: null
    };

    for let i = 1; i < argc; i = i + 1 {
        let arg = *(argv + i);

        if *arg != '-' {
            options.files.push_ptr(arg as *void);
        } else {
            let set_to_next: *string = null;
            let takes_argument = false;

            if *(arg + 1) != '-' {
                takes_argument = parse_short(&options, arg + 1, &set_to_next);
            } else if std.strlen(arg) < 3 {
                io.printf("ERROR: Invalid flag '--'\n");
                options.had_errors = true;
            } else {
                takes_argument = parse_long(&options, arg + 2, &set_to_next);
            }

            if takes_argument {
                if argc - i <= 1 {
                    options.had_errors = true;
                    io.printf("ERROR: Expected argument after '%s'\n", arg);
                }
                // skip next argument
                i = i + 1;
                *set_to_next = *(argv + i);
            }
        }
    }

    options.had_errors = error_in_config_values(&options);
    return options;
}

// if this returns true, the following argument is interpreted as a value
// set_to_next will be set to the field in options, which needs to be set to the next command line
// argument (if available)
def parse_short(options: *Options, arg: string, set_to_next: **string): bool {
    let len = std.strlen(arg);

    if len == 2 && *arg == 'O' {
        let num = *(arg + 1) - '0';

        if num < 0 || num > 3 {
            io.printf("ERROR: Invalid optimization level: %d\n", num);
            options.had_errors = true;
        } else {
            options.opt_level = num;
        }

        return false;
    }

    if len == 1 && *arg == 'o' {
        *set_to_next = &options.output_filename;
        return true;
    }

    if len == 1 && *arg == 'h' {
        print_usage();
        options.exit_immediately = true;
        return false;
    }

    if len == 1 && *arg == 'g' {
        options.debug_info = true;
        return false;
    }

    io.printf("ERROR: Invalid flag '%s'\n", arg);
    options.had_errors = true;
    return false;
}

def parse_long(options: *Options, arg: string, set_to_next: **string): bool {
    if std.strcmp(arg, "help") == 0 {
        print_usage();
        options.exit_immediately = true;
        return false;
    }

    if std.strcmp(arg, "sys") == 0 {
        *set_to_next = &options.target_os;
        return true;
    }

    io.printf("ERROR: Invalid flag '%s'\n", arg);
    options.had_errors = true;
    return false;
}

def error_in_config_values(options: *Options): bool {
    if options.had_errors {
        return true;
    }

    if options.target_os != null {
        if std.strcmp(options.target_os, "win32") == 0 {}
        else if std.strcmp(options.target_os, "linux") == 0 {}
        else if std.strcmp(options.target_os, "darwin") == 0 {}
        else {
            io.printf("ERROR: Invalid target system '%s'\n", options.target_os);
            return true;
        }
    }

    return false;
}

def print_usage() {
    io.printf("kantan\nFelix Schoeller <felix.schoeller@protonmail.com>\n");
    io.printf("The official compiler for the Kantan programming language\n\n");
    io.printf("USAGE:\n");
    io.printf("    kantan [OPTIONS] <source-file>...\n\n");
    io.printf("OPTIONS:\n");
    io.printf("    -o <file>\tthe output file (end with .s for assembly output)\n");
    io.printf("    -O<level>\tthe optimization level\t[possible values 0, 1, 2, 3]\n");
    io.printf("    -h / --help\tprint this message\n");
    io.printf("    --sys\tset the target OS\t[possible values 'linux', 'darwin', 'win32']\n");
    io.printf("\n");
    io.printf("ARGS:\n");
    io.printf("    <source-file>...\n");
}
