import "lexer" as l;

type Precedence enum {
    None,
    Assign,
    Or,
    And,
    Equality,
    Comparison,
    Sum,
    Product,
    Unary,
    Call,
    Access
}

def get(token_type: l.TokenType): Precedence {
    if token_type >= l.TokenType.Eq && token_type <= l.TokenType.PercentEq {
        return Precedence.Assign;
    }

    if token_type == l.TokenType.DoublePipe {
        return Precedence.Or;
    }

    if token_type == l.TokenType.DoubleAmpersand {
        return Precedence.And;
    }

    if token_type == l.TokenType.DoubleEq || token_type == l.TokenType.BangEq {
        return Precedence.Equality;
    }

    if token_type >= l.TokenType.Smaller && token_type <= l.TokenType.GreaterEq {
        return Precedence.Comparison;
    }

    if token_type == l.TokenType.Plus || token_type == l.TokenType.Minus {
        return Precedence.Sum;
    }

    if token_type == l.TokenType.Star
        || token_type == l.TokenType.Slash
        || token_type == l.TokenType.Percent
        || token_type == l.TokenType.As {
        return Precedence.Product;
    }

    if token_type == l.TokenType.LParen || token_type == l.TokenType.LBrace {
        return Precedence.Call;
    }

    if token_type == l.TokenType.Dot {
        return Precedence.Access;
    }

    return Precedence.None;
}
