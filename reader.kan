import "vec";
import "path";
import "file";
import "source";
import "std";

import "io"; // TODO: only debug

type FileAddError struct {
    file_name: string,
    err_code: i32
}

type FileMap struct {
    files: vec.Vec // SourceFiles
}

def create(): FileMap {
    return FileMap { files: vec.create(sizeof source.SourceFile) };
}

def num_files(m: *FileMap): i32 {
    return m.files.len;
}

def get_by_idx(m: *FileMap, idx: i32): source.SourceFile {
    let s = source.empty();
    vec.get(&m.files, idx, &s as *void);
    return s;
}

def free_fm(m: *FileMap): void {
    let i = 0;
    while i < m.files.len {
        let s = source.empty();
        if vec.get(&m.files, i, &s as *void) {
            source.free_sf(&s);
        }
        i = i + 1;
    }

    vec.free_v(&m.files);
}

def add_all(m: *FileMap, bin_path: *path.Path, len: i32, file_names: *string): FileAddError {
    let i = 1;
    while i < len {
        let file_name = *(file_names + i);
        let res = 0;
        if (res = reader.add_file(m, bin_path, file_name)) != 0 {
            return FileAddError { file_name: file_name, err_code: res };
        }
        i = i + 1;
    }

    return FileAddError { file_name: null, err_code: 0 };
}

def add_file(m: *FileMap, bin_path: *path.Path, name: string): i32 {
    let p = path.empty();
    let res = 0;
    if (res = path.from_str(name, &p)) != 0 {
        return res;
    }

    let abs_path = path.buf_from(path.empty());
    let error = path.merge_abs_rel(bin_path, &p, &abs_path);
    if error != 0 {
        return error;
    }

    let sf = source.empty();
    if (res = source.read(abs_path, &sf)) != 0 {
        path.free_pb(&abs_path);
        return res;
    }

    vec.push(&m.files, &sf as *void);

    return 0;
}
