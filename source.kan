import "path";
import "file";
import "span";
import "std";

type LineSpan struct {
    start_number: i32,
    span: span.Span
}

type SourceFile struct {
    len: i32,
    code: string,
    file: file.File
}

def empty(): SourceFile {
    return SourceFile { len: 0, code: null, file: file.empty() };
}

def free_sf(sf: *SourceFile): void {
    delete sf.code;
    file.free_f(&sf.file);
}

def file_name_dup(sf: *SourceFile): string {
    return file.name_dup(&sf.file);
}

def code(sf: *SourceFile): string {
    return sf.code;
}

def read(p: path.PathBuf, f: *SourceFile): i32 {
    let new_file = file.create(p);
    let s: string = null;
    let len = 0;
    let res = file.read_to_string(&new_file, &s, &len);

    if res != 0 {
        return res;
    }

    *f = SourceFile { len: len, code: s, file: new_file };

    return 0;
}

def find_line(
    target: span.Span,
    file: *SourceFile,
    last_nl_pos: *i32
): LineSpan {
    let lines = 1;
    let last_nl = target.start;

    let ptr = target.start;
    while ptr != file.code {
        if *ptr == '\n' {
            lines = lines + 1;

            if last_nl == target.start {
                last_nl = ptr;
            }
        }
        ptr = ptr - 1;
    }

    // there was no new line => span is in first line of file
    if last_nl == target.start {
        last_nl = file.code - 1; // we add a 1 later, which is correct in every other case
    }

    if last_nl_pos != null {
        *last_nl_pos = last_nl - file.code;
    }

    // the \n at the end of the line with span in it
    let next_nl = std.strchr(target.end, '\n');
    let line_span = span.create(last_nl + 1, next_nl);
    return LineSpan { start_number: lines, span: line_span };
}

