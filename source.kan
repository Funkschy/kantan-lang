import "path";
import "file";
import "span";
import "std";

type LineSpan struct {
    start_number: i32,
    span: span.BigSpan
}

type SourceFile struct {
    file: file.File,
    code: string
}

def empty(): SourceFile {
    return SourceFile { file: file.empty(), code: null };
}

def free_sf(sf: *SourceFile): void {
    delete sf.code;
    file.free_f(&sf.file);
}

def file_name_dup(sf: *SourceFile): string {
    return file.name_dup(&sf.file);
}

def code(sf: *SourceFile): string {
    return sf.code;
}

def read(p: path.PathBuf, f: *SourceFile): i32 {
    let new_file = file.create(p);
    let s: string = null;
    let res = file.read_to_string(&new_file, &s);

    if res != 0 {
        return res;
    }

    *f = SourceFile { file: new_file, code: s };

    return 0;
}

def find_line(
    target: *span.BigSpan,
    si: *span.SpanInterner,
    file: *SourceFile,
    last_nl_pos: *i32
): LineSpan {
    let lines = 1;
    let last_nl = target.start;

    let ptr = file.code + target.start;
    while ptr != file.code {
        if *ptr == '\n' {
            lines = lines + 1;

            if last_nl == target.start {
                last_nl = ptr - file.code;
            }
        }
        ptr = ptr - 1;
    }

    // there was no new line => span is in first line of file
    if last_nl == target.start {
        last_nl = -1; // we add a 1 later, which is correct in every other case
    }

    if last_nl_pos != null {
        *last_nl_pos = last_nl;
    }

    // the \n at the end of the line with span in it
    let next_nl = std.strchr(file.code + target.start + target.len, '\n');
    let line_span = span.create(si, last_nl + 1, next_nl - file.code, target.ctx);
    return LineSpan { start_number: lines, span: span.get(si, line_span) };
}

