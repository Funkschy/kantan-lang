import "path";
import "file";
import "span";
import "std";

type LineSpan struct {
    pos: SourcePos,
    span: span.Span
}

type SourcePos struct {
    lnr: i32, // line number. Starting from 1
    col: i32  // column number. Starting from 1
}

type SourceFile struct {
    len: i32,
    code: string,
    file: file.File
}

def empty(): SourceFile {
    return SourceFile { len: 0, code: null, file: file.empty() };
}

def free_sf(sf: *SourceFile): void {
    delete sf.code;
    file.free_f(&sf.file);
}

def file_name_dup(sf: *SourceFile): string {
    return file.name_dup(&sf.file);
}

def code(sf: *SourceFile): string {
    return sf.code;
}

def read(p: path.PathBuf, f: *SourceFile): i32 {
    let new_file = file.create(p);
    let s: string = null;
    let len = 0;
    let res = file.read_to_string(&new_file, &s, &len);

    if res != 0 {
        return res;
    }

    *f = SourceFile { len: len, code: s, file: new_file };

    return 0;
}

def line_info(
    file: *SourceFile,
    target: span.Span,
    out_line_start: *string,
    out_line_end: *string,
    out_line_nr: *i32,
    out_col: *i32
): void {
    let lines = 1;
    let last_nl = target.start;

    let ptr = target.start;
    while ptr != file.code {
        if *ptr == '\n' {
            lines = lines + 1;

            if last_nl == target.start {
                last_nl = ptr;
            }
        }
        ptr = ptr - 1;
    }

    // there was no new line => span is in first line of file
    if last_nl == target.start {
        last_nl = file.code - 1; // we add a 1 later, which is correct in every other case
    }

    // the \n at the end of the line with span in it
    if out_line_end != null {
        *out_line_end = std.strchr(target.end, '\n');
    }
    if out_line_start != null {
        *out_line_start = last_nl + 1;
    }
    if out_col != null {
        *out_col = target.start - last_nl;
    }
    if out_line_nr != null {
        *out_line_nr = lines;
    }
}

def find_line(file: *SourceFile, target: span.Span): LineSpan {
    let pos = SourcePos{ lnr: 0, col: 0 };
    let line_span = span.empty();

    line_info(file, target, &line_span.start, &line_span.end, &pos.lnr, &pos.col);
    return LineSpan { pos: pos, span: line_span };
}
