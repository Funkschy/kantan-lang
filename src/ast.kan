import "ty";
import "std";
import "vec";
import "func";
import "span";
import "name";
import "tyid";
import "lexer";
import "ident";
import "ptrvec";
import "record";

/////////// kinds ///////////

type StmtKind enum {
    Expr = 1,
    Let,
    Import,
    FuncDecl,
    StructDecl,
    EnumDecl,
    UnionDecl,
    Block,
    If,
    While,
    Delete,
    Return,
    Continue,
    Break,
    Defer,
    For
}

type ExprKind enum {
    IntLiteral = 1,
    FloatLiteral,
    NullLiteral,
    Undefined,
    StringLiteral,
    ArrayStringLiteral,
    CharLiteral,
    Binary,
    Unary,
    Identifier,
    Assignment,
    Call,
    StructLiteral,
    Access,
    As,
    New,
    SizeOf,
    Index // array[i]
}

// These have to match their respective MirBinaryKind
type BinaryKind enum {
    Add = 1, // these have to start from 1, for AssignType to work
    Sub,
    Mul,
    Div,
    Mod,
    BitAnd,
    BitOr,
    BitXor,

    ST,
    SE,
    GT,
    GE,

    Eq,
    NE,
    LogAnd,
    LogOr,

    LShift,
    RShift
}

def (k: BinaryKind) is_bit_op(): bool {
    return k == BinaryKind.LShift || k == BinaryKind.RShift
        || k == BinaryKind.BitAnd || k == BinaryKind.BitOr
        || k == BinaryKind.BitXor;
}

type UnaryKind enum {
    Ref = 1,
    Deref,
    NegBool,
    NegNum,
    BitNot
}

/////////// expr stmt ///////////

type ExprStmt struct {
    s: Stmt,
    expr: *Expr
}

def new_expr_stmt(e: *Expr): *Stmt {
    return (new ExprStmt { s: Stmt { tag: StmtKind.Expr, span: e.span }, expr: e }) as *Stmt;
}

def is_expr_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Expr;
}

def as_expr_stmt(s: *Stmt): *ExprStmt {
    return s as *ExprStmt;
}

/////////// Delete stmt ///////////

type DeleteStmt struct {
    s: Stmt,
    expr: *Expr
}

def new_delete_stmt(span: span.Span, expr: *Expr): *Stmt {
    return (new DeleteStmt {
        s: Stmt { tag: StmtKind.Delete, span: span },
        expr: expr
    }) as *Stmt;
}

def is_delete_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Delete;
}

def as_delete_stmt(s: *Stmt): *DeleteStmt {
    return s as *DeleteStmt;
}

/////////// Return stmt ///////////

type ReturnStmt struct {
    s: Stmt,
    expr: *Expr
}

def new_return_stmt(span: span.Span, expr: *Expr): *Stmt {
    return (new ReturnStmt {
        s: Stmt { tag: StmtKind.Return, span: span },
        expr: expr
    }) as *Stmt;
}

def is_return_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Return;
}

def as_return_stmt(s: *Stmt): *ReturnStmt {
    return s as *ReturnStmt;
}

/////////// Continue stmt ///////////

type ContinueStmt struct {
    s: Stmt
}

def new_continue_stmt(span: span.Span): *Stmt {
    return (new ContinueStmt {
        s: Stmt { tag: StmtKind.Continue, span: span }
    }) as *Stmt;
}

def is_continue_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Continue;
}

def as_continue_stmt(s: *Stmt): *ContinueStmt {
    return s as *ContinueStmt;
}

/////////// Break stmt ///////////

type BreakStmt struct {
    s: Stmt
}

def new_break_stmt(span: span.Span): *Stmt {
    return (new BreakStmt {
        s: Stmt { tag: StmtKind.Break, span: span }
    }) as *Stmt;
}

def is_break_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Break;
}

def as_break_stmt(s: *Stmt): *BreakStmt {
    return s as *BreakStmt;
}

/////////// Defer stmt ///////////

type DeferStmt struct {
    s: Stmt,
    stmt: *Stmt
}

def new_defer_stmt(span: span.Span, stmt: *Stmt): *Stmt {
    return (new DeferStmt {
        s: Stmt { tag: StmtKind.Defer, span: span },
        stmt: stmt
    }) as *Stmt;
}

def is_defer_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Defer;
}

def as_defer_stmt(s: *Stmt): *DeferStmt {
    return s as *DeferStmt;
}

/////////// While stmt ///////////

type WhileStmt struct {
    s: Stmt,
    condition: *Expr,
    block: *BlockStmt,
    end_block: *BlockStmt // only used for the increment of for loops
}

def new_while_stmt(span: span.Span, condition: *Expr, block: *BlockStmt): *Stmt {
    return (new WhileStmt {
        s: Stmt { tag: StmtKind.While, span: span },
        condition: condition,
        block: block,
        end_block: null
    }) as *Stmt;
}

def is_while_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.While;
}

def as_while_stmt(s: *Stmt): *WhileStmt {
    return s as *WhileStmt;
}

/////////// For stmt ///////////

type ForStmt struct {
    s: Stmt,
    initializer: *Stmt,
    condition: *Expr,
    increment: *Stmt,
    block: *BlockStmt
}

def new_for_stmt(
    span: span.Span,
    initializer: *Stmt,
    condition: *Expr,
    increment: *Stmt,
    block: *BlockStmt
): *Stmt {
    return (new ForStmt {
        s: Stmt { tag: StmtKind.For, span: span },
        initializer: initializer,
        condition: condition,
        increment: increment,
        block: block
    }) as *Stmt;
}

def is_for_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.For;
}

def as_for_stmt(s: *Stmt): *ForStmt {
    return s as *ForStmt;
}

/////////// If stmt ///////////

type IfStmt struct {
    s: Stmt,
    condition: *Expr,
    block: *BlockStmt,
    else_stmt: *Stmt // either IfStmt or BlockStmt
}

def new_if_stmt(span: span.Span, condition: *Expr, block: *BlockStmt, else_stmt: *Stmt): *Stmt {
    return (new IfStmt {
        s: Stmt { tag: StmtKind.If, span: span },
        condition: condition,
        block: block,
        else_stmt: else_stmt
    }) as *Stmt;
}

def is_if_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.If;
}

def as_if_stmt(s: *Stmt): *IfStmt {
    return s as *IfStmt;
}

/////////// Block stmt ///////////

type BlockStmt struct {
    s: Stmt,
    stmts: ptrvec.Vec
}

def new_block_stmt(span: span.Span, statements: ptrvec.Vec): *Stmt {
    return (new BlockStmt{
        s: Stmt { tag: StmtKind.Block, span: span },
        stmts: statements
    }) as *Stmt;
}

def is_block_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Block;
}

def as_block_stmt(s: *Stmt): *BlockStmt {
    return s as *BlockStmt;
}

def stmt_at(b: *BlockStmt, i: usize): *Stmt {
    return b.stmts.get(i) as *Stmt;
}

def set_stmt_at(b: *BlockStmt, i: usize, s: *Stmt) {
    b.stmts.set(i, s as *void);
}

def (b: *BlockStmt) push(s: *Stmt) {
    b.stmts.push_ptr(s as *void);
}

def push_stmt(b: *BlockStmt, s: *Stmt): void {
    b.stmts.push_ptr(s as *void);
}

/////////// Func Decl stmt ///////////

type FuncDeclStmt struct {
    s: Stmt,
    decl: func.FuncDef,
    block: *BlockStmt
}

def new_func_decl_stmt(
    kind: func.Kind,
    span: span.Span,
    ident: lexer.Token,
    params: func.ParamList,
    ret_ty: tyid.Type,
    block: *BlockStmt
): *Stmt {
    return (new FuncDeclStmt {
        s: Stmt { tag: StmtKind.FuncDecl, span: span },
        decl: func.create_func(ident, params, ret_ty, kind),
        block: block
    }) as *Stmt;
}

def new_method_decl_stmt(
    span: span.Span,
    ident: lexer.Token,
    receiver: func.Param,
    params: func.ParamList,
    ret_ty: tyid.Type,
    block: *BlockStmt
): *Stmt {
    return (new FuncDeclStmt {
        s: Stmt { tag: StmtKind.FuncDecl, span: span },
        decl: func.create_method(ident, receiver, params, ret_ty),
        block: block
    }) as *Stmt;
}

def is_func_decl_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.FuncDecl;
}

def as_func_decl_stmt(s: *Stmt): *FuncDeclStmt {
    return s as *FuncDeclStmt;
}

/////////// Struct Decl stmt ///////////

type StructDeclStmt struct {
    s: Stmt,
    decl: record.StructDecl
}

def new_struct_decl_stmt(span: span.Span, name: ident.Ident, fields: vec.Vec): *Stmt {
    return (new StructDeclStmt {
        s: Stmt { tag: StmtKind.StructDecl, span: span },
        decl: record.create_struct(name, fields)
    }) as *Stmt;
}

def is_struct_decl_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.StructDecl;
}

def as_struct_decl_stmt(s: *Stmt): *StructDeclStmt {
    return s as *StructDeclStmt;
}

/////////// Union Decl stmt ///////////

type UnionDeclStmt struct {
    s: Stmt,
    decl: record.UnionDecl
}

def new_union_decl_stmt(span: span.Span, name: ident.Ident, fields: vec.Vec): *Stmt {
    return (new UnionDeclStmt {
        s: Stmt { tag: StmtKind.UnionDecl, span: span },
        decl: record.create_union(name, fields)
    }) as *Stmt;
}

def is_union_decl_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.UnionDecl;
}

def as_union_decl_stmt(s: *Stmt): *UnionDeclStmt {
    return s as *UnionDeclStmt;
}

/////////// Enum Decl stmt ///////////

type EnumDeclStmt struct {
    s: Stmt,
    decl: record.EnumDecl,
    start_value: *Expr // if null => start_value = 0
}

def new_enum_decl_stmt(
    span: span.Span,
    name: ident.Ident,
    values: vec.Vec,
    start_value: *Expr
): *Stmt {
    return (new EnumDeclStmt {
        s: Stmt { tag: StmtKind.EnumDecl, span: span },
        decl: record.create_enum(name, values),
        start_value: start_value
    }) as *Stmt;
}

def is_enum_decl_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.EnumDecl;
}

def as_enum_decl_stmt(s: *Stmt): *EnumDeclStmt {
    return s as *EnumDeclStmt;
}

/////////// import stmt ///////////

type ImportStmt struct {
    s: Stmt,
    mod: ident.Ident,
    alias: ident.Ident,
    mod_ty: *ty.Type // filled by tychk
}

def new_import_stmt(span: span.Span, mod_name: ident.Ident, alias: ident.Ident): *Stmt {
    return (new ImportStmt {
        s: Stmt { tag: StmtKind.Import, span: span },
        mod: mod_name,
        alias: alias,
        mod_ty: null
    }) as *Stmt;
}

def is_import_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Import;
}

def as_import_stmt(s: *Stmt): *ImportStmt {
    return s as *ImportStmt;
}

def import_has_alias(i_s: *ImportStmt): bool {
    return !ident.is_empty(&i_s.alias);
}

def (i_s: *ImportStmt) is_qualified(): bool {
    return !ident.eq_lit(&i_s.alias, "_");
}

/////////// let stmt ///////////

type LetStmt struct {
    s: Stmt,
    value: *Expr,
    ident: ident.Ident,
    ty: tyid.Type
}

def new_let_stmt(span: span.Span, ident_token: lexer.Token, ty: tyid.Type, value: *Expr): *Stmt {
    return (new LetStmt {
        s: Stmt { tag: StmtKind.Let, span: span },
        value: value,
        ident: ident.create(ident_token),
        ty: ty
    }) as *Stmt;
}

def is_let_stmt(s: *Stmt): bool {
    return s.tag == StmtKind.Let;
}

def as_let_stmt(s: *Stmt): *LetStmt {
    return s as *LetStmt;
}

def has_type_decl(s: *LetStmt): bool {
    return !s.ty.is_empty();
}

/////////// base stmt ///////////

type Stmt struct {
    tag: StmtKind,
    span: span.Span
}

def stmt_free(s: *Stmt): void {
    if s == null {
        return;
    }

    if is_expr_stmt(s) {
        expr_free(as_expr_stmt(s).expr);
    } else if is_let_stmt(s) {
        as_let_stmt(s).ty.free();
        expr_free(as_let_stmt(s).value);
    } else if is_delete_stmt(s) {
        expr_free(as_delete_stmt(s).expr);
    } else if is_defer_stmt(s) {
        stmt_free(as_defer_stmt(s).stmt);
    } else if is_return_stmt(s) {
        expr_free(as_return_stmt(s).expr);
    } else if is_func_decl_stmt(s) {
        let f_decl = as_func_decl_stmt(s);
        f_decl.decl.free();
        stmt_free(f_decl.block as *Stmt);
    } else if is_block_stmt(s) {
        let stmts = as_block_stmt(s).stmts;

        for let i: usize = 0; i < stmts.len; i += 1 {
            let s = stmts.get(i);
            if s != null {
                stmt_free(s as *Stmt);
            }
        }

        stmts.free();
    } else if is_if_stmt(s) {
        let if_stmt = as_if_stmt(s);
        expr_free(if_stmt.condition);
        stmt_free(if_stmt.block as *Stmt);
        stmt_free(if_stmt.else_stmt);
    } else if is_while_stmt(s) {
        let while_stmt = as_while_stmt(s);
        expr_free(while_stmt.condition);
        stmt_free(while_stmt.block as *Stmt);
        stmt_free(while_stmt.end_block as *Stmt);
    } else if is_for_stmt(s) {
        let for_stmt = as_for_stmt(s);
        stmt_free(for_stmt.initializer);
        expr_free(for_stmt.condition);
        stmt_free(for_stmt.increment);
        stmt_free(for_stmt.block as *Stmt);
    } else if is_struct_decl_stmt(s) {
        let s_stmt = as_struct_decl_stmt(s);
        s_stmt.decl.free();
    } else if is_enum_decl_stmt(s) {
        let e_stmt = as_enum_decl_stmt(s);
        e_stmt.decl.free();
        expr_free(e_stmt.start_value);
    } else if is_union_decl_stmt(s) {
        let u_stmt = as_union_decl_stmt(s);
        u_stmt.decl.free();
    }

    delete s;
}

/////////// access expr ///////////

// first.second.third
// might contain pointers
type AccessExpr struct {
    e: Expr,
    // left could be another AccessExpr
    left: *Expr,
    right: *IdentExpr
}

def new_access_expr(span: span.Span, left: *Expr, right: *IdentExpr): *Expr {
    return (new AccessExpr {
        e: create_expr(ExprKind.Access, span),
        left: left,
        right: right
    }) as *Expr;
}

def is_access_expr(e: *Expr): bool {
    return e.kind == ExprKind.Access;
}

def as_access_expr(e: *Expr): *AccessExpr {
    return e as *AccessExpr;
}

/////////// index expr ///////////

// first[second][third]
type IndexExpr struct {
    e: Expr,
    // left could be another IndexExpr
    left: *Expr,
    right: *Expr
}

def new_index_expr(span: span.Span, left: *Expr, right: *Expr): *Expr {
    return (new IndexExpr {
        e: create_expr(ExprKind.Index, span),
        left: left,
        right: right
    }) as *Expr;
}

def is_index_expr(e: *Expr): bool {
    return e.kind == ExprKind.Index;
}

def as_index_expr(e: *Expr): *IndexExpr {
    return e as *IndexExpr;
}

/////////// as expr ///////////

type AsExpr struct {
    e: Expr,
    expr: *Expr,
    ty: tyid.Type
}

def new_as_expr(span: span.Span, expr: *Expr, ty: tyid.Type): *Expr {
    return (new AsExpr {
        e: create_expr(ExprKind.As, span),
        expr: expr,
        ty: ty
    }) as *Expr;
}

def is_as_expr(e: *Expr): bool {
    return e.kind == ExprKind.As;
}

def as_as_expr(e: *Expr): *AsExpr {
    return e as *AsExpr;
}

/////////// new expr ///////////

type NewExpr struct {
    e: Expr,
    expr: *Expr
}

def new_new_expr(span: span.Span, expr: *Expr): *Expr {
    return (new NewExpr {
        e: create_expr(ExprKind.New, span),
        expr: expr
    }) as *Expr;
}

def is_new_expr(e: *Expr): bool {
    return e.kind == ExprKind.New;
}

def as_new_expr(e: *Expr): *NewExpr {
    return e as *NewExpr;
}

/////////// call expr ///////////

type CallExpr struct {
    e: Expr,
    callee: *Expr,
    args: ArgList
}

def new_call_expr(span: span.Span, callee: *Expr, args: ArgList): *Expr {
    return (new CallExpr {
        e: create_expr(ExprKind.Call, span),
        callee: callee,
        args: args
    }) as *Expr;
}

def is_call_expr(e: *Expr): bool {
    return e.kind == ExprKind.Call;
}

def as_call_expr(e: *Expr): *CallExpr {
    return e as *CallExpr;
}

/////////// Init expr ///////////

type InitExpr struct {
    e: Expr,
    identifier: *Expr,
    inits: InitList
}

def new_init_expr(span: span.Span, identifier: *Expr, inits: InitList): *Expr {
    return (new InitExpr {
        e: create_expr(ExprKind.StructLiteral, span),
        identifier: identifier,
        inits: inits
    }) as *Expr;
}

def is_init_expr(e: *Expr): bool {
    return e.kind == ExprKind.StructLiteral;
}

def as_init_expr(e: *Expr): *InitExpr {
    return e as *InitExpr;
}

/////////// assign expr ///////////

type AssignType enum {
    Normal, PlusEq, MinusEq, TimesEq, DivEq, RemEq, AndEq, OrEq, XorEq
}

type AssignExpr struct {
    e: Expr,
    assign_type: AssignType, // =, +=, -=, *=, /=, %=, &=, |=, ^=
    assign_span: span.Span,
    left: *Expr,
    right: *Expr
}

def new_assign_expr(
    span: span.Span,
    assign_token: lexer.Token,
    left: *Expr,
    right: *Expr
): *Expr {
    let normalized = assign_token.ty as i32 - (lexer.TokenType.Eq as i32);
    let assign_type = *(&normalized as *AssignType);

    return (new AssignExpr {
        e: create_expr(ExprKind.Assignment, span),
        assign_type: assign_type,
        assign_span: assign_token.span,
        left: left,
        right: right
    }) as *Expr;
}

def is_assign_expr(e: *Expr): bool {
    return e.kind == ExprKind.Assignment;
}

def as_assign_expr(e: *Expr): *AssignExpr {
    return e as *AssignExpr;
}

/////////// ident expr ///////////

type IdentExpr struct {
    e: Expr,
    ident: ident.Ident
}

def new_ident_expr(ident_token: lexer.Token): *Expr {
    return (new IdentExpr {
        e: create_expr(ExprKind.Identifier, ident_token.span),
        ident: ident.create(ident_token)
    }) as *Expr;
}

def is_ident_expr(e: *Expr): bool {
    return e.kind == ExprKind.Identifier;
}

def as_ident_expr(e: *Expr): *IdentExpr {
    return e as *IdentExpr;
}

/////////// int expr ///////////

// TODO(#10): hex, oct ...
type IntExpr struct {
    e: Expr,
    ptr: string
}

def new_int_expr(span: span.Span, ptr: string): *Expr {
    return (new IntExpr {
        e: create_expr(ExprKind.IntLiteral, span),
        ptr: ptr
    }) as *Expr;
}

def is_int_expr(e: *Expr): bool {
    return e.kind == ExprKind.IntLiteral;
}

def as_int_expr(e: *Expr): *IntExpr {
    return e as *IntExpr;
}

/////////// float expr ///////////

type FloatExpr struct {
    e: Expr,
    ptr: string
}

def new_float_expr(span: span.Span, ptr: string): *Expr {
    return (new FloatExpr {
        e: create_expr(ExprKind.FloatLiteral, span),
        ptr: ptr
    }) as *Expr;
}

def is_float_expr(e: *Expr): bool {
    return e.kind == ExprKind.FloatLiteral;
}

def as_float_expr(e: *Expr): *FloatExpr {
    return e as *FloatExpr;
}

/////////// null expr ///////////

type NullExpr struct {
    e: Expr
}

def new_null_expr(span: span.Span): *Expr {
    return (new NullExpr {
        e: create_expr(ExprKind.NullLiteral, span)
    }) as *Expr;
}

def is_null_expr(e: *Expr): bool {
    return e.kind == ExprKind.NullLiteral;
}

def as_null_expr(e: *Expr): *NullExpr {
    return e as *NullExpr;
}

/////////// undefined expr ///////////

type UndefinedExpr struct {
    e: Expr
}

def new_undefined_expr(span: span.Span): *Expr {
    return (new UndefinedExpr {
        e: create_expr(ExprKind.Undefined, span)
    }) as *Expr;
}

def is_undefined_expr(e: *Expr): bool {
    return e.kind == ExprKind.Undefined;
}

def as_undefined_expr(e: *Expr): *UndefinedExpr {
    return e as *UndefinedExpr;
}

/////////// sizeOf expr ///////////

type SizeOfExpr struct {
    e: Expr,
    ty: tyid.Type,
    actual_ty: *ty.Type // filled by tychk
}

def new_sizeof_expr(span: span.Span, ty: tyid.Type): *Expr {
    return (new SizeOfExpr {
        e: create_expr(ExprKind.SizeOf, span),
        ty: ty,
        actual_ty: null
    }) as *Expr;
}

def is_sizeof_expr(e: *Expr): bool {
    return e.kind == ExprKind.SizeOf;
}

def as_sizeof_expr(e: *Expr): *SizeOfExpr {
    return e as *SizeOfExpr;
}

/////////// array string expr ///////////

type ArrayStringExpr struct {
    e: Expr,
    // this will be used if the string literal is to interpreted as an array.
    // in that case we already need to know the length during type checking, so we cache the
    // result of escaping here
    escaped: name.Owned
}

def new_array_string_expr(span: span.Span, escaped: name.Owned): *Expr {
    return (new ArrayStringExpr {
        e: create_expr(ExprKind.ArrayStringLiteral, span),
        escaped: escaped
    }) as *Expr;
}

def is_array_string_expr(e: *Expr): bool {
    return e.kind == ExprKind.ArrayStringLiteral;
}

def as_array_string_expr(e: *Expr): *ArrayStringExpr {
    return e as *ArrayStringExpr;
}

/////////// string expr ///////////

type StringExpr struct {
    e: Expr,
    // in this case, the string literal will be put on the stack as an array
    initialized_as_array: bool,
    // this will be used if the string literal is to interpreted as an array.
    // in that case we already need to know the length during type checking, so we cache the
    // result of escaping here
    escaped: name.Owned
}

def new_string_expr(span: span.Span): *Expr {
    return (new StringExpr {
        e: create_expr(ExprKind.StringLiteral, span),
        initialized_as_array: false,
        escaped: name.make_owned(0, "")
    }) as *Expr;
}

def is_string_expr(e: *Expr): bool {
    return e.kind == ExprKind.StringLiteral;
}

def as_string_expr(e: *Expr): *StringExpr {
    return e as *StringExpr;
}

/////////// char expr ///////////

type CharExpr struct {
    e: Expr,
    ptr: string
}

def new_char_expr(span: span.Span, ptr: string): *Expr {
    return (new CharExpr {
        e: create_expr(ExprKind.CharLiteral, span),
        ptr: ptr
    }) as *Expr;
}

def is_char_expr(e: *Expr): bool {
    return e.kind == ExprKind.CharLiteral;
}

def as_char_expr(e: *Expr): *CharExpr {
    return e as *CharExpr;
}

/////////// binary expr ///////////

type BinaryExpr struct {
    e: Expr,
    kind: BinaryKind,
    free_left: bool, // needed for transformation of +=, -= etc.
    left: *Expr,
    right: *Expr,
    op_span: span.Span
}

def new_binary_expr(
    span: span.Span,
    kind: BinaryKind,
    op_span: span.Span,
    left: *Expr,
    right: *Expr
): *Expr {
    return (new BinaryExpr {
        e: create_expr(ExprKind.Binary, span),
        kind: kind,
        free_left: true,
        left: left,
        right: right,
        op_span: op_span
    }) as *Expr;
}

def is_binary_expr(e: *Expr): bool {
    return e.kind == ExprKind.Binary;
}

def as_binary_expr(e: *Expr): *BinaryExpr {
    return e as *BinaryExpr;
}

/////////// unaryexpr ///////////

type UnaryExpr struct {
    e: Expr,
    kind: UnaryKind,
    right: *Expr
}

def new_unary_expr(span: span.Span, kind: UnaryKind, right: *Expr): *Expr {
    return (new UnaryExpr {
        e: create_expr(ExprKind.Unary, span),
        kind: kind,
        right: right
    }) as *Expr;
}

def is_unary_expr(e: *Expr): bool {
    return e.kind == ExprKind.Unary;
}

def as_unary_expr(e: *Expr): *UnaryExpr {
    return e as *UnaryExpr;
}

/////////// base expr ///////////

type Expr struct {
    kind: ExprKind,
    ty: *ty.Type,
    span: span.Span
}

def create_expr(kind: ExprKind, span: span.Span): Expr {
    return Expr { kind: kind, ty: null, span: span };
}

def is_assignable(e: *Expr): bool {
    let assignable = is_access_expr(e)
        || is_index_expr(e)
        || is_ident_expr(e);

    if is_unary_expr(e) {
        assignable = as_unary_expr(e).kind == UnaryKind.Deref;
    }

    return assignable;
}

def (e: *Expr) can_init_array(): bool {
    return  is_undefined_expr(e) || is_array_string_expr(e);
}

def (e: *Expr) is_const_evaluatable(): bool {
    if is_string_expr(e) || is_array_string_expr(e)
       || is_int_expr(e) || is_float_expr(e)
       || is_undefined_expr(e) || is_null_expr(e) {
        return true;
    }

    if is_unary_expr(e) {
        let unary = as_unary_expr(e);
        return unary.kind == UnaryKind.NegNum
            && (is_int_expr(unary.right) || is_float_expr(unary.right));
    }

    return false;
}

def expr_free(e: *Expr): void {
    if e == null {
        return;
    }

    if is_binary_expr(e) {
        let b_expr = as_binary_expr(e);
        if b_expr.free_left {
            expr_free(b_expr.left);
        }
        expr_free(b_expr.right);
    } else if is_assign_expr(e) {
        let a_expr = as_assign_expr(e);
        expr_free(a_expr.left);
        expr_free(a_expr.right);
    } else if is_access_expr(e) {
        let a_expr = as_access_expr(e);
        expr_free(a_expr.left);
        expr_free(a_expr.right as *Expr);
    } else if is_index_expr(e) {
        let i_expr = as_index_expr(e);
        expr_free(i_expr.left);
        expr_free(i_expr.right);
    } else if is_call_expr(e) {
        let c_expr = as_call_expr(e);
        expr_free(c_expr.callee);
        free_al(&c_expr.args);
    } else if is_init_expr(e) {
        let i_expr = as_init_expr(e);
        expr_free(i_expr.identifier);
        free_il(&i_expr.inits);
    } else if is_unary_expr(e) {
        expr_free(as_unary_expr(e).right);
    } else if is_as_expr(e) {
        as_as_expr(e).ty.free();
        expr_free(as_as_expr(e).expr);
    } else if is_new_expr(e) {
        expr_free(as_new_expr(e).expr);
    } else if is_sizeof_expr(e) {
        as_sizeof_expr(e).ty.free();
    } else if is_array_string_expr(e) {
        let a_e = as_array_string_expr(e);
        name.free_owned(&a_e.escaped);
    }

    delete e;
}

/////////// ArgList ///////////
// TODO(#18): should be in own file, but can't because compiler can't handle circular imports

type ArgList struct {
    args: ptrvec.Vec
}

def create_arg_list(): ArgList {
    return ArgList { args: ptrvec.create() };
}

def (al: *ArgList) count(): u32 {
    return al.args.len as u32;
}

def get_arg_at(al: *ArgList, i: u32): *Expr {
    return al.args.get(i as usize) as *Expr;
}

def set_arg_at(al: *ArgList, i: u32, expr: *Expr) {
    al.args.set(i as usize, expr as *void);
}

def push_arg(al: *ArgList, arg: *Expr): void {
    al.args.push_ptr(arg as *void);
}

def free_al(al: *ArgList): void {
    for let i: usize = 0; i < al.args.len; i += 1 {
        let e = al.args.get(i) as *Expr;
        expr_free(e);
    }

    al.args.free();
}

/////////// InitList ///////////
// TODO(#25): should be in own file, but can't because compiler can'e handle circular imports

type Init struct {
    ident: ident.Ident,
    expr: *Expr
}

def create_init(ident: ident.Ident, expr: *Expr): Init {
    return Init { ident: ident, expr: expr };
}

type InitList struct {
    inits: vec.Vec
}

def create_init_list(): InitList {
    return InitList { inits: vec.create(sizeof Init) };
}

def (il: *InitList) count(): u32 {
    return il.inits.len as u32;
}

def init_expr_at(il: *InitList, i: u32): *Expr {
    let init: *Init = null;
    if (init = init_at(il, i)) == null {
        return null;
    }
    return init.expr;
}

def set_init_expr_at(il: *InitList, i: u32, value: *Expr) {
    (il.inits.get_ptr(i as usize) as *Init).expr = value;
}

def init_at(il: *InitList, i: u32): *Init {
    return il.inits.get_ptr(i as usize) as *Init;
}

def (il: *InitList) get_ptr(i: u32): *Init {
    return il.inits.get_ptr(i as usize) as *Init;
}

def push_init(il: *InitList, init: Init) {
    il.inits.push(&init as *void);
}

def free_il(il: *InitList) {
    for let i: u32 = 0; i < il.count(); i += 1 {
        expr_free(init_at(il, i).expr);
    }

    il.inits.free();
}
