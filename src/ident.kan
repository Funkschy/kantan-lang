import ":std/str";
import ":std/map";

import "std";
import "span";
import "name";
import "lexer";

type Ident struct {
    span: span.Span
}

def create(t: lexer.Token): Ident {
    return Ident { span: t.span };
}

def from_span(span: span.Span): Ident {
    return Ident { span: span };
}

def from_key(key: map.Key): Ident {
    return Ident { span: span.create(key.value, key.value + key.len) };
}

def empty(): Ident {
    return create(lexer.empty_token());
}

def (i: *Ident) as_key(): map.Key {
    return map.create_key(i.len(), i.start());
}

def is_empty(i: *Ident): bool {
    return start(i) == null;
}

def start(i: *Ident): string {
    return i.span.start;
}

def len(i: *Ident): usize {
    return span.len(i.span);
}

def (i: *Ident) start(): string {
    return i.span.start;
}

def (i: *Ident) len(): usize {
    return span.len(i.span);
}

def (i: Ident) ref(): name.Ref {
    return name.make_ref(i.len(), i.start());
}

def (i: Ident) equals(other: Ident): bool {
    return eq_value(&i, &other);
}

def char_at(i: *Ident, pos: usize): i8 {
    return *(i.span.start + pos);
}

def eq_lit(id: *Ident, lit: string): bool {
    if is_empty(id) {
        return false;
    }

    let len = len(id);
    if len != std.strlen(lit) {
        return false;
    }

    return std.strncmp(start(id), lit, len) == 0;
}

def eq_value(first: *Ident, second: *Ident): bool {
    let first_len = len(first);
    if first_len != len(second) {
        return false;
    }

    return std.memcmp(
        start(first) as *void, start(second) as *void, first_len
    ) == 0;
}

// -1 if not found
def (id: *Ident) index_of(c: i8): isize {
    let len = id.len();
    for let i: usize = 0; i < len; i += 1 {
        if char_at(id, i) == c {
            return i as isize;
        }
    }
    return -1;
}

def (i: Ident) drop(n: usize): Ident {
    if n >= i.len() {
        return from_span(span.empty());
    }

    let s = span.create(i.span.start + 1, i.span.end);
    return from_span(s);
}

// this does a strdup and needs to be freed
def (i: *Ident) to_string(): str.String {
    return str.from_l(i.start(), i.len());
}
