import "ty";
import "vec";
import "ast";
import "path";
import "map";
import "std";
import "name";
import "error";
import "ident";
import "symbol";
import "source";
import "ptrvec";

type Module struct {
    idx: u32, // index in modmap used for faster access
    name: name.Owned, // injected after parsing
    source: *source.SourceFile,
    statements: ptrvec.Vec,
    // indices into 'Module.statements'
    imports: vec.Vec, // vec.Vec[usize]
    ty: *ty.Type // the Type containing the bindings
}

def create(src: *source.SourceFile): Module {
    return Module {
        idx: -1,
        name: name.make_owned(0, null),
        source: src,
        statements: ptrvec.create(),
        imports: vec.create(sizeof usize),
        ty: null
    };
}

def (m: *Module) set_mangled_mod_name(proj_root: path.Path) {
    let mangled = name.s_mangle(proj_root, 0, null, m);
    mangled.len = mangled.len - 1;
    *(mangled.data + mangled.len) = '\0';
    m.name = mangled;
}

def get_path(m: *Module): path.Path {
    return m.source.file.path.inner;
}

def is_std_lib(m: *Module): bool {
    return m.source.is_std_lib;
}

def (m: *Module) lookup_type(key_len: usize, key: string): symbol.Data {
    return ty.get_type_scope(m.ty).get(key_len, key);
}

def (m: *Module) lookup_value(key_len: usize, key: string): symbol.Data {
    return ty.get_value_scope(m.ty).get(key_len, key);
}

def get_stmt_at(mod: *Module, i: usize): *ast.Stmt {
    return mod.statements.get(i) as *ast.Stmt;
}

def set_stmt_at(mod: *Module, i: usize, s: *ast.Stmt): void {
    mod.statements.set(i, s as *void);
}

def num_stmts(mod: *Module): usize {
    return mod.statements.len;
}

def get_special_stmt_at(mod: *Module, indices: *vec.Vec, i: usize): *ast.Stmt {
    let idx: usize = 0;
    if !indices.get(i, &idx as *void) {
        return null;
    }

    let s: *ast.Stmt = get_stmt(mod, idx);
    if s == null {
        return null;
    }

    return s;
}

def (mod: *Module) import_at(i: usize): *ast.Stmt {
    return get_special_stmt_at(mod, &mod.imports, i);
}

def (mod: *Module) num_imports(): u32 {
    return mod.imports.len as u32;
}

def push_stmt(mod: *Module, stmt: *ast.Stmt) {
    if ast.is_import_stmt(stmt) {
        mod.imports.push(&mod.statements.len as *void);
    }

    mod.statements.push_ptr(stmt as *void);
}

def get_stmt(mod: *Module, i: usize): *ast.Stmt {
    return mod.statements.get(i) as *ast.Stmt;
}

def free_m(mod: *Module) {
    for let i: usize = 0; i < mod.statements.len; i += 1 {
        ast.stmt_free(get_stmt(mod, i));
    }

    mod.statements.free();
    mod.imports.free();
    ty.free_ty(mod.ty);

    name.free_owned(&mod.name);
}

type Map struct {
    proj_root: path.Path,
    // TODO(#80): replace with vmap.Map
    mods: ptrvec.Vec,
    mod_paths: map.Map // full mod path -> index in mods
}

def map_with_cap(proj_root: path.Path, size: usize): Map {
    return Map {
        proj_root: proj_root,
        mods: ptrvec.with_cap(size),
        mod_paths: map.with_cap(size)
    };
}

def num_mods(mm: *Map): u32 {
    return mm.mods.len as u32;
}

def add_mod(mm: *Map, mod: *Module) {
    let idx = mm.mods.len;
    mm.mods.push_ptr(mod as *void);
    mod.idx = idx as u32;

    // add one, to be able to tell null apart from 0
    let idx = std.int_to_ptr(idx + 1);
    let p = get_path(mod);
    let key = map.create_key(p.len, p.inner);
    mm.mod_paths.insert(key, idx);
}

def get_mod(mm: *Map, idx: u32): *Module {
    return mm.mods.get(idx as usize) as *Module;
}

// returns -1 if not found
def get_mod_idx(mm: *Map, abs_path: *path.Path): i64 {
    let key = map.create_key(abs_path.len, abs_path.inner);
    let ptr = mm.mod_paths.get(key);
    if ptr == null {
        return -1;
    }

    return std.ptr_to_int(ptr) as i64 - 1;
}

def get_mod_by_path(mm: *Map, abs_path: *path.Path): *Module {
    let idx = get_mod_idx(mm, abs_path);
    if idx < 0 {
        return null;
    }
    return get_mod(mm, idx as u32);
}

def map_free(mm: *Map) {
    for let i: u32 = 0; i < num_mods(mm); i += 1 {
        let m = get_mod(mm, i);
        free_m(m);
        delete m;
    }
    mm.mods.free();
    mm.mod_paths.free();
}

def get_abs_import_path(
    current_path: path.Path,
    imp_path: path.Path,
    dest: *path.PathBuf
): error.CompileError {
    return path.merge_abs_rel_suffix(
        &current_path, &imp_path, source.kantan_file_ending(null), dest
    );
}

// on error, this will return null and fill (if not null) the
// supplied errdest parameter with a heap allocated error message!
def try_get_mod_from_import(
    mm: *Map,
    mod: *Module,
    imp: *ast.ImportStmt,
    errdest: *string
): *Module {
    // TODO(#7): extract errors to lib.h with the ususal error code system

    let plen = ident.len(&imp.mod);
    let file_ending_len: usize = 0;
    let file_ending = source.kantan_file_ending(&file_ending_len);
    let path_str = std.format_str("%.*s%s", plen, ident.start(&imp.mod), file_ending);
    let p = path.create(path_str, plen + file_ending_len);

    let imported_mod = get_mod_by_path(mm, &p);
    delete path_str;

    if imported_mod != null {
        return imported_mod;
    }

    let lookup_relative_to = get_path(mod);
    lookup_relative_to = path.parent(&lookup_relative_to);

    let relative_path = path.create(imp.mod.start(), imp.mod.len());

    // if the imported path starts with ':' we use the projects base path as our absolute path
    // instead of the current module
    if imp.mod.index_of(':') == 0 {
        lookup_relative_to = mm.proj_root;
        // remove ':'
        relative_path = relative_path.drop(1);
    }

    // if not in stdlib, try absolute path
    let abs = path.buf_from(path.empty());
    let ret_val = get_abs_import_path(lookup_relative_to, relative_path, &abs);

    if ret_val != error.CompileError.OK {
        let mod_s = lookup_relative_to.to_string();
        defer mod_s.free();

        let imp_s = relative_path.to_string();
        defer imp_s.free();

        if errdest != null {
            // TODO(#68): the error message produced for a 'file not found' error
            //  is 'no such process, which is confusing'
            let err = std.format_str(
                "%s: %s%s%s",
                // TODO(#114): handle file errors in a platform independent way
                std.strerror(ret_val as i32),
                mod_s.cstring(),
                imp_s.cstring(),
                file_ending
            );

            *errdest = err;
        }

        return null;
    }

    imported_mod = get_mod_by_path(mm, &abs.inner);

    // nothing we can do...
    if imported_mod == null {
        if errdest != null {
            let s = path.to_string(&abs.inner);
            *errdest = std.format_str("%s is not being compiled", s);
            delete s;
        }

        path.free_pb(&abs);
        return null;
    }

    path.free_pb(&abs);
    return imported_mod;
}
