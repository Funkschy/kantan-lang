import "std";

def swap(values: *u32, indices: *u32, i: u32, j: u32) {
    let tmp_value = *(values + i);
    let tmp_index = *(indices + i);

    *(values + i) = *(values + j);
    *(indices + i) = *(indices + j);

    *(values + j) = tmp_value;
    *(indices + j) = tmp_index;
}

def inner_sort(values: *u32, indices: *u32, len: u32) {
    if len <= 1 {
        return;
    }

    let pivot_idx = len / 2;
    let pivot = values + pivot_idx;

    let j: u32 = len - 1;
    let i: u32 = -1;

    let running = true;
    while running {
        while *(values + (i+=1)) < *pivot {}
        while *(values + (j-=1)) > *pivot && j > 0 {}

        if i < j {
            swap(values, indices, i, j);
        } else {
            running = false;
        }
    }

    swap(values, indices, i, pivot_idx);
    inner_sort(values, indices, i);
    let end = i + 1;
    inner_sort(values + end, indices + end, len - end);
}

// returns an array (with length len) with the original indices of import_nums
//                     0  1  2  3
//                     ----------
// e.g. import_coutns: 2, 4, 1, 2
// returns:            2, 3, 0, 1
def sort(import_counts: *u32, len: u32): *u32 {
    let indices = std.malloc(len as usize * sizeof u32) as *u32;
    for let i: u32 = 0; i < len; i+= 1 {
        *(indices + i) = i;
    }

    inner_sort(import_counts, indices, len);

    return indices;
}
