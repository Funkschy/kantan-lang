// This modules defines NameTables which are used by mirc to define variable names.

import ":std/map";
import ":std/vec";
import ":std/dbg";
import "std";
import "name";

type NameScope struct {
    // maps from a source name to a index into mangled_names of the NameTable
    bindings: map.Map // map.Map<name.Ref, i32>
}

def create_scope(): NameScope {
    return NameScope{
        bindings: map.create()
    };
}

def free_s(ns: *NameScope) {
    ns.bindings.free();
}

def bind_in(ns: *NameScope, original: name.Ref, idx: usize) {
    let key = map.create_key(original.len, original.data);
    // differentiate index 0 from null
    ns.bindings.insert(key, std.int_to_ptr(idx + 1));
}

def get_in(ns: *NameScope, name: name.Ref, out: *usize): bool {
    let key = map.create_key(name.len, name.data);
    let index = ns.bindings.get(key);
    if index == null {
        return false;
    }

    // differentiate index 0 from null
    *out = std.ptr_to_int(index) - 1;
    return true;
}

// A NameTable for human readable names
// Binds the original name of a variable to a new one, to allow scopes.
// 1 {
// 2     let x = 5;
// 3     {
// 4         let x = "test";
// 5     }
// 6     let x = "";
// 7 }
//
// In the outer scope, lookup(nt, "x") will return x before line 6 (x_1 after).
// In the inner scope, is will return `x_1`
type NameTable struct {
    scopes: vec.Vec, // vec.Vec<NameScope>
    // this counts how many versions of each name were at one point in scope
    in_scope: map.Map, // map.Map<name.Ref, i32>
    mangled_names: vec.Vec // vec.Vec<name.Owned>
}

def create(): NameTable {
    return NameTable {
        scopes: vec.create(sizeof NameScope),
        in_scope: map.create(),
        mangled_names: vec.create(sizeof name.Owned)
    };
}

def free_nt(nt: *NameTable): void {
    std.assert_fmt(nt.scopes.len == 0, "%d open scopes left", nt.scopes.len);

    nt.scopes.free();

    for let i: usize = 0; i < nt.mangled_names.len; i += 1 {
        let n = nt.mangled_names.get_ptr(i) as *name.Owned;
        dbg.assert(n != null, "name was null");

        name.free_owned(n);
    }

    nt.mangled_names.free();
    nt.in_scope.free();
}

def top(nt: *NameTable): *NameScope {
    return scope_at(nt, nt.scopes.len - 1);
}

def scope_at(nt: *NameTable, i: usize): *NameScope {
    return nt.scopes.get_ptr(i) as *NameScope;
}

def bind(nt: *NameTable, to_bind: name.Ref): name.Ref {
    let value = num_in_scope(nt, to_bind);

    let new_name = to_bind.data;
    let new_name_len = to_bind.len;

    // check if this is a new name, which is not yet in scope
    if value == 0 {
        // the mangled name should be owned, so just copy it here
        new_name = std.strndup(new_name, new_name_len);
    } else {
        new_name = std.format_str("%.*s_%d", new_name_len, new_name, value);
        new_name_len = new_name_len + 1 + std.int_num_digits(value);
    }

    let mangled = name.make_owned(new_name_len, new_name);
    let top = top(nt);
    dbg.assert(top != null, "top was null");

    let idx = nt.mangled_names.len;
    bind_in(top, to_bind, idx);
    nt.mangled_names.push(&mangled as *void);

    set_in_scope(nt, to_bind, value + 1);

    return name.ref(mangled);
}

def open_scope(nt: *NameTable) {
    let scope = create_scope();
    push_scope(nt, &scope);
}

def num_in_scope(nt: *NameTable, name: name.Ref): usize {
    let key = map.create_key(name.len, name.data);
    return std.ptr_to_int(nt.in_scope.get(key));
}

def set_in_scope(nt: *NameTable, name: name.Ref, count: usize) {
    let key = map.create_key(name.len, name.data);
    let count = std.int_to_ptr(count);
    nt.in_scope.insert(key, count);
}

def close_scope(nt: *NameTable) {
    let top = top(nt);
    free_s(top);
    nt.scopes.len = nt.scopes.len - 1;
}

def push_scope(s: *NameTable, scope: *NameScope) {
    s.scopes.push(scope as *void);
}

def lookup(nt: *NameTable, needle: name.Ref, out: *name.Ref): bool {
    for let i = nt.scopes.len - 1; i as isize >= 0; i -= 1 {
        let scope = scope_at(nt, i);
        let idx: usize = 0;
        if get_in(scope, needle, &idx) {
            let mangled = nt.mangled_names.get_ptr(idx) as *name.Owned;

            *out = name.ref(*mangled);
            return true;
        }
    }

    return false;
}
