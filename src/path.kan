// TODO(#8): should be platform dependant
let system_separator: i8  = 47; // '/'

import "std";
import ":std/str";
import ":std/dbg";
import "error";

extern def getcwd(buf: string, buf_size: usize): string;
extern def realpath(path: string, resolved: string): string;

type Path struct {
    len: usize,
    inner: string
}

def empty(): Path {
    return Path { len: 0, inner: null };
}

def create(value: string, len: usize): Path {
    return Path { len: len, inner: value };
}

def sys_separator(): i8 {
    return system_separator;
}

def from_str(s: string, p: *Path): error.CompileError {
    let len = std.strlen(s);
    if len == 0 {
        return error.CompileError.PathEmpty;
    }

    *p = Path { len: len, inner: s };
    return error.CompileError.OK;
}

def from_str_len(s: string, len: usize, p: *Path): error.CompileError {
    if len == 0 {
        return error.CompileError.PathEmpty;
    }

    *p = Path { len: len, inner: s };
    return error.CompileError.OK;
}

def ends_with(p: *Path, s: string): bool {
    let len = std.strlen(s);
    if len > p.len {
        return false;
    }

    return std.strncmp(p.inner + (p.len - len), s, len) == 0;
}

def last_separator_ptr(p: *Path): string {
    let ptr = p.inner + p.len - 1;
    while ptr > p.inner {
        ptr = ptr - 1;
        if *ptr == system_separator {
            return ptr;
        }
    }

    return null;
}

def parent(p: *Path): Path {
    if is_root(p) {
        return *p;
    }

    let lsp = last_separator_ptr(p);
    if lsp != null {
        return create(p.inner, (lsp - p.inner + 1) as usize);
    }

    return *p;
}

def count_overlap(first: *Path, second: *Path): usize {
    let len = first.len;
    if second.len < first.len {
        len = second.len;
    }

    for let i: usize = 0; i < len; i += 1 {
        if *(first.inner + i) != *(second.inner + i) {
            return i;
        }
    }

    return len;
}

def (p: Path) drop(n: usize): Path {
    if n >= p.len {
        return create("", 0);
    }

    return create(p.inner + n, p.len - n);
}

// TODO(#16): windows support
//  this functions uses the posix only "realpath" function
// this function resolves stuff like .. or . in place
def canonicalize(p: *Path, dest: *PathBuf): error.CompileError {
    let buf = std.strndup(p.inner, p.len);
    let real = realpath(buf, null);
    delete buf;

    if real == null {
        return error.CompileError.CouldNotOpenFile;
    }

    free_pb(dest);
    *dest = create_path_buf(real);

    return error.CompileError.OK;
}

def is_abs(p: *Path): bool {
    // TODO(#23): windows support
    return *p.inner == system_separator || *p.inner == '~';
}

def is_root(p: *Path): bool {
    // TODO(#29): windows support
    return is_abs(p) && std.strlen(p.inner) == 1;
}

def to_string(p: *Path): string {
    return std.strndup(p.inner, p.len);
}

def (p: *Path) to_string(): str.String {
    return str.from_l(p.inner, p.len);
}

def get_cwd(): PathBuf {
    let buf_size: usize = 255;
    let buf = std.malloc(buf_size * sizeof i8) as string;

    // TODO(#34): windows support
    if getcwd(buf, buf_size) == null {
        delete buf;
        return buf_from(empty());
    }

    return create_path_buf(buf);
}

type PathBuf struct {
    inner: Path
}

def new_path_buf(path: string): PathBuf {
    return create_path_buf(std.strdup(path));
}

def new_path_buf_l(len: usize, path: string): PathBuf {
    let dup = std.strdup(path);
    return buf_from(create(dup, len));
}

def create_path_buf(path: string): PathBuf {
    let p = empty();
    if from_str(path, &p) != error.CompileError.OK {
        delete path;
        return PathBuf { inner: empty() };
    }

    return PathBuf {
        inner: p
    };
}

def buf_from(path: Path): PathBuf {
    return PathBuf { inner: path };
}

def merge_abs_rel(base: *Path, child: *Path, dest: *PathBuf): error.CompileError {
    return merge_abs_rel_suffix(base, child, null, dest);
}

def merge_abs_rel_suffix(
    base: *Path,
    child: *Path,
    suffix: string,
    dest: *PathBuf
): error.CompileError {
    if base.len == 0 || is_abs(child) {
        *dest = new_path_buf(child.inner);

        let ret_val = canonicalize(&dest.inner, dest);
        if ret_val != error.CompileError.OK {
            free_pb(dest);
            return ret_val;
        }

        return error.CompileError.OK;
    }

    let combined: string = null;
    if suffix != null {
        combined = std.format_str(
            "%.*s%c%.*s%s",
            base.len,
            base.inner,
            system_separator,
            child.len,
            child.inner,
            suffix
        );
    } else {
        combined = std.format_str(
            "%.*s%c%.*s",
            base.len,
            base.inner,
            system_separator,
            child.len,
            child.inner
        );
    }

    let pb = create_path_buf(combined);
    let ret_val = canonicalize(&pb.inner, &pb);

    if ret_val != error.CompileError.OK {
        free_pb(&pb);
        return ret_val;
    }

    *dest = pb;

    return error.CompileError.OK;
}

// the largest shared path of the 2 paths
// Example:
// The following files have a common sub path of '/home/user/'
// /home/user/test.kan
// /home/user/kantan/other.kan
def common_parent(first: Path, second: Path): PathBuf {
    dbg.assert(is_abs(&first), "First path was not absolute");
    dbg.assert(is_abs(&second), "Second path was not absolute");

    let smaller_len = first.len;
    if second.len < smaller_len {
        smaller_len = second.len;
    }

    // TODO(#69): on windows paths start with a drive letter, so we need to adjust
    //  the code to handle this
    let last_separator: usize = 0;
    for let i: usize = 0; i < smaller_len; i += 1 {
        let ptr = first.inner + i;

        if *ptr != *(second.inner + i) {
            let len = last_separator + 1;

            return new_path_buf_l(len, first.inner);
        }

        if *ptr == system_separator {
            last_separator = i;
        }
    }

    // both paths are either identical or one is a subpath of the other one
    return new_path_buf_l(smaller_len, first.inner);
}

def free_pb(pb: *PathBuf): void {
    if pb.inner.inner != null {
        delete pb.inner.inner;
    }
}
