import "std";
import "dbg";

type Vec struct {
    len: usize,
    cap: usize,
    elements: **void
}

def create(): Vec {
    return Vec { len: 0, cap: 0, elements: null };
}

def with_cap(cap: usize): Vec {
    let vec = create();
    vec.resize_s(cap);
    return vec;
}

def (v: *Vec) zero() {
    std.memset(v.elements as *void, 0, v.len * sizeof *void);
}

def (v: *Vec) is_empty(): bool {
    return v.len == 0;
}

def (v: *Vec) pop(): *void {
    if !v.is_empty() {
        let elem = v.get(0);
        v.len = v.len - 1;
        std.memmove(
            v.elements as *void,
            (v.elements + 1) as *void,
            v.len * sizeof **void
        );
        return elem;
    }
    return null;
}

def (v: *Vec) append(other: *Vec): void {
    if other.is_empty() {
        return;
    }

    let new_len = v.len + other.len;
    v.resize_s(new_len);
    std.memcpy(
        (v.elements + v.len) as *void,
        other.elements as *void,
        other.len * sizeof *void
    );
    v.len = new_len;
}

def (v: *Vec) push_ptr(elem: *void): void {
    if v.len + 1 > v.cap {
        v.resize();
    }

    *(v.elements + v.len) = elem;
    v.len = v.len + 1;
}

def (v: *Vec) get(i: usize): *void {
    if i < v.len {
        return *(v.elements + i);
    }

    return null;
}

def (v: *Vec) unsafe_get(i: usize): *void {
    return *(v.elements + i);
}

def (v: *Vec) set(i: usize, elem: *void): void {
    dbg.assert_fmt(i >= 0 && i < v.cap, "out of bounds set: %d", i);

    // sizeof(*v.elements) is already 8, so we don't need to multiply
    *(v.elements + i) = elem;
    // assume all values in between to be initialized
    if i >= v.len {
        v.len = i + 1;
    }
}

def (v: *Vec) resize_s(size: usize): void {
    if size <= v.cap {
        return;
    }

    v.cap = size;
    if v.elements == null {
        v.elements = std.calloc(v.cap, sizeof **void) as **void;
    } else {
        v.elements = std.realloc(v.elements as *void, v.cap * sizeof **void) as **void;
        std.memset((v.elements + v.len) as *void, 0, (v.cap - v.len) * sizeof **void);
    }
}

def (v: *Vec) resize(): void {
    if v.elements == null {
        v.resize_s(2);
    } else {
        v.resize_s(v.cap * 2);
    }
}

def (v: *Vec) free(): void {
    if v.elements == null {
        return;
    }
    delete v.elements;
}
