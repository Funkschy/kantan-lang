import "ty";
import ":std/map";
import "span";
import ":std/vmap";
import "ident";
import "symbol";
import ":std/ptrvec";
import "name" as n;

type Scope struct {
    scope_name: n.Ref,
    bindings: vmap.Map // vmap.Map<ident.Ident, symbol.WithVisibility>
}

def create(): Scope {
    return with_name(n.empty());
}

def with_name(name: n.Ref): Scope {
    return Scope { scope_name: name, bindings: vmap.create(sizeof symbol.WithVisibility) };
}

def (s: *Scope) name(): n.Ref {
    let static = n.make_ref(5, "scope");

    if s == null {
        return static;
    }

    return s.scope_name.or_else(static);
}

def free_s(s: *Scope) {
    s.bindings.free();
}

def (s: *Scope) bind_public_ident(ident: *ident.Ident, ty: *ty.Type): symbol.WithVisibility {
    return s.bind(ident.len(), ident.start(), ty, symbol.Visibility.Public);
}

def (s: *Scope) bind_ident(
    ident: *ident.Ident,
    ty: *ty.Type,
    visibility: symbol.Visibility
): symbol.WithVisibility {
    return s.bind(ident.len(), ident.start(), ty, visibility);
}

def (s: *Scope) bind(
    ident_len: usize,
    ident: string,
    ty: *ty.Type,
    visibility: symbol.Visibility
): symbol.WithVisibility {
    let value = symbol.create(ty, visibility);
    s.bindings.insert(
        map.create_key(ident_len, ident),
        &value as *void
    );
    return value;
}

def (s: *Scope) get_ident(ident: *ident.Ident): symbol.Data {
    return s.get(ident.len(), ident.start());
}

def (s: *Scope) get(key_len: usize, key: string): symbol.Data {
    let ptr = s.bindings.get_ptr(map.create_key(key_len, key)) as *symbol.WithVisibility;
    return ptr.or_empty().with_scope(s);
}

type ScopeItem struct {
    name: ident.Ident,
    symbol: symbol.Data
}

def (item: *ScopeItem) present(): bool {
    return !ident.is_empty(&item.name);
}

type ScopeIter struct {
    inner: map.Iter,
    scope: *Scope
}

def (s: *Scope) iter(): ScopeIter {
    return ScopeIter { inner: s.bindings.mappings.iter(), scope: s };
}

def (i: *ScopeIter) next(): ScopeItem {
    let next = i.inner.next();
    let symbol: symbol.Data = undefined;

    // skip private symbols
    while next != null && (symbol = i.scope.get(next.key.len, next.key.value)).is_private() {
        next = i.inner.next();
    }

    if next == null {
        return ScopeItem { name: ident.empty(), symbol: undefined };
    }

    return ScopeItem {
        name: ident.from_span(span.create(next.key.value, next.key.value + next.key.len)),
        symbol: symbol
    };
}

type ScopeStack struct {
    scopes: ptrvec.Vec // vec of *Scopes
}

def empty_stack(): ScopeStack {
    return ScopeStack { scopes: ptrvec.create() };
}

def create_stack(): ScopeStack {
    return ScopeStack {
        scopes: ptrvec.create()
    };
}

def free_stack(s: *ScopeStack, start_idx: usize) {
    let i = start_idx; // dont free global scopes
    // since all opened scopes are also closed, this code will never be
    // executed, should be remove it or keep it here, just to be sure?
    while i < num_scopes(s) {
        let scope = scope_at(s, i);
        free_s(scope);
        delete scope;
        i = i + 1;
    }
    s.scopes.free();
}

def open_scope(s: *ScopeStack) {
    let scope = new create();
    push_scope(s, scope);
}

def push_scope(s: *ScopeStack, scope: *Scope) {
    s.scopes.push_ptr(scope as *void);
}

def close_scope(s: *ScopeStack) {
    let top = top(s);
    free_s(top);
    delete top;
    s.scopes.len = s.scopes.len - 1;
}

def close_scope_no_free(s: *ScopeStack) {
    s.scopes.len = s.scopes.len - 1;
}

def scope_at(s: *ScopeStack, i: usize): *Scope {
    return s.scopes.get(i) as *Scope;
}

def top(s: *ScopeStack): *Scope {
    return scope_at(s, s.scopes.len - 1);
}

def bind_public(s: *ScopeStack, ident: *ident.Ident, value: *ty.Type): symbol.WithVisibility {
    return top(s).bind_public_ident(ident, value);
}

def bind_private(s: *ScopeStack, ident: *ident.Ident, value: *ty.Type): symbol.WithVisibility {
    return top(s).bind_ident(ident, value, symbol.Visibility.Private);
}

def num_scopes(s: *ScopeStack): usize {
    return s.scopes.len;
}

def lookup(s: *ScopeStack, ident: *ident.Ident): symbol.Data {
    for let i = num_scopes(s) - 1; i as isize >= 0; i -= 1 {
        let scope = scope_at(s, i);
        let bound = scope.get_ident(ident);
        if bound.present() {
            return bound;
        }
    }

    return symbol.empty();
}
