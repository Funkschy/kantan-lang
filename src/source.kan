import "std";
import "str";
import "path";
import "file";
import "span";
import "error";
import "ptrvec";

import "dbg";

def kantan_file_ending(len: *usize): string {
    if len != null {
        *len = 4;
    }
    return ".kan";
}

type LineSpan struct {
    pos: SourcePos,
    span: span.Span
}

type SourcePos struct {
    lnr: u32, // line number. Starting from 1
    col: u32  // column number. Starting from 1
}

def empty_pos(): SourcePos {
    return SourcePos { lnr: 0, col: 0 };
}

type SourceFile struct {
    is_std_lib: bool,
    code: str.String,
    file: file.File,
    map: SourceMap
}

def (sf: *SourceFile) free() {
    sf.code.free();
    sf.file.free();
    sf.map.free();
}

def (sf: *SourceFile) name_dup(): string {
    return sf.file.name_dup();
}

def (sf: *SourceFile) end(): string {
    return sf.code.cstring() + sf.code.len();
}

def read(p: path.PathBuf, f: *SourceFile, is_std_lib: bool): error.CompileError {
    let new_file = file.create(p);
    let s: str.String = undefined;
    let res = new_file.read_to_string(&s);

    if res != error.CompileError.OK {
        return res;
    }

    let map = map_from_source(&s);
    *f = SourceFile {
        is_std_lib: is_std_lib,
        code: s,
        file: new_file,
        map: map
    };

    return error.CompileError.OK;
}

def (file: *SourceFile) line_info(
    target: span.Span,
    out_line_start: *string,
    out_line_end: *string,
    out_line_nr: *u32,
    out_col: *u32
) {
    let code = file.code.cstring();
    dbg.assert_fmt(
        code <= target.start && target.end <= file.end(),
        "invalid target (%p-%p) for source (%p-%p) in %.*s",
        target.start, target.end,
        file.code.cstring(), file.end(),
        file.file.path.inner.len, file.file.path.inner.inner
    );

    let last_nl = target.start;

    let ptr = target.start;
    while ptr > code {
        if *ptr == '\n' {
            last_nl = ptr;
            break;
        } else {
            ptr = ptr - 1;
        }
    }

    // there was no new line => span is in first line of file
    if last_nl == target.start {
        last_nl = code - 1; // we add a 1 later, which is correct in every other case
    }

    // the \n at the end of the line with span in it
    if out_line_end != null {
        *out_line_end = std.find_char(target.end, '\n');
        if *out_line_end == null {
            *out_line_end = file.end();
        }
    }
    if out_line_start != null {
        *out_line_start = last_nl + 1;
    }
    if out_col != null {
        *out_col = (target.start - last_nl) as u32;
    }
    if out_line_nr != null {
        let line_nr = file.map.find_line_in_srcmap(target);
        dbg.assert(line_nr >= 0, "could not find line for span");
        *out_line_nr = line_nr as u32;
    }
}

def (file: *SourceFile) find_line(target: span.Span): LineSpan {
    let pos = SourcePos{ lnr: 0, col: 0 };
    let line_span = span.empty();

    file.line_info(target, &line_span.start, &line_span.end, &pos.lnr, &pos.col);

    return LineSpan { pos: pos, span: line_span };
}

def (file: *SourceFile) span_to_pos(target: span.Span): SourcePos {
    let pos = SourcePos{ lnr: 0, col: 0 };
    file.line_info(target, null, null, &pos.lnr, &pos.col);
    return pos;
}

// This is used to convert Spans into SourcePos' quickly
type SourceMap struct {
    end_of_code: string,
    line_starts: ptrvec.Vec // ptrvec.Vec<string>
}

def map_from_source(code: *str.String): SourceMap {
    let len = code.len();
    let code = code.cstring();

    let line_estimate = len / 24; // assume that a line has 24 chars on avg
    let vec = ptrvec.with_cap(line_estimate);
    let pos = code;
    let end = code + len;

    while pos != null && pos != end {
        vec.push_ptr(pos as *void);
        pos = std.find_char(pos, '\n');
        if pos != null {
            pos = pos + 1;
        }
    }

    return SourceMap { end_of_code: code + len, line_starts: vec };
}

// does a binary search inside the SourceMap, to find the line number of the
// specified span
def (m: *SourceMap) find_line_in_srcmap(span: span.Span): i64 {
    let start: usize = 0;
    let end = m.line_starts.len - 1;

    while start <= end {
        let idx = ((start + end) / 2) as u32;
        let line_start = m.line_at(idx);
        let line_end = m.line_at(idx + 1);

        if line_end == null {
            // no next line, so just use the end of the string
            line_end = m.end_of_code;
        }
        line_end = line_end - 1;

        if line_start <= span.start && span.start <= line_end {
            // span is in this line
            return idx as i64 + 1;
        } else if span.start > line_start {
            // span is to the right of current line
            start = idx as usize + 1;
        } else {
            // span is to the left of current line
            end = idx as usize - 1;
        }
    }

    return end as i64 + 1;
}

def (m: *SourceMap) line_at(idx: u32): string {
    return m.line_starts.get(idx as usize) as string;
}

def (m: *SourceMap) free() {
    m.line_starts.free();
}
