import "ast";
import ":std/str";
import ":std/dbg";
import "std";
import "mod";
import ":std/vec";
import ":std/map";
import ":std/vmap";
import "span";
import "name";
import "scope";
import "ident";
import "symbol";
import ":std/ptrvec";
import "typaram";

extern def type2str(kind: i32): string;

// the order is important, if it is changed, the order of strings in lib.h also has to change
type Kind enum {
    Error,
    Template, TemplateParam,
    Ptr,
    Array, Slice,
    Bool,
    Integer,
    F32, F64,
    Void,
    Func, Signature,
    Mod,
    Struct, Enum, Union
}

let width_unknown: i64 = -1;

// These flags have to be powers of 2
let flag_type_scoped = 1;
let flag_value_scoped = 2;
let flag_unsized = 4;
// this gets set, when tychk visits a type for the first time and gets unset
// when the type is fully resolved
let flag_tychk_touched = 8;

/////////// error type ///////////

def new_error(): *Type {
    let t = new_type(Kind.Error, null);
    std.flag_set(&t.flags, flag_unsized);
    return t;
}

def is_error(t: *Type): bool {
    return t.kind == Kind.Error;
}

/////////// void type ///////////

// TODO(#84): remove void type. Replace it with byte type and empty return types

def new_void(): *Type {
    let t = new_type(Kind.Void, null);
    std.flag_set(&t.flags, flag_unsized);
    return t;
}

def is_void(t: *Type): bool {
    return t.kind == Kind.Void;
}

/////////// int type ///////////

type Integer struct {
    signed: bool,
    target_dependent: bool
}

def new_integer(width: usize, signed: bool, target_dependent: bool): *Type {
    let t = new_type(
        Kind.Integer, (new Integer {
            signed: signed, target_dependent: target_dependent
        }) as *void
    );

    t.align = width as i32;
    t.width = width as i64;
    return t;
}

def (t: *Type) is_integer(): bool {
    return t.kind == Kind.Integer;
}

def (t: *Type) as_integer(): *Integer {
    return t.data as *Integer;
}

def (t: *Type) is_signed(): bool {
    return t.is_integer() && t.as_integer().signed;
}

def (t: *Type) is_char(): bool {
    return t.is_integer() && t.as_integer().signed && t.width == 1;
}

/////////// f32 type ///////////

def new_f32(): *Type {
    let t = new_type(Kind.F32, null);
    t.width = (t.align = 4) as i64;
    return t;
}

def is_f32(t: *Type): bool {
    return t.kind == Kind.F32;
}

/////////// f64 type ///////////

def new_f64(): *Type {
    let t = new_type(Kind.F64, null);
    t.width = (t.align = 8) as i64;
    return t;
}

def is_f64(t: *Type): bool {
    return t.kind == Kind.F64;
}

/////////// bool type ///////////

def new_bool(): *Type {
    let t = new_type(Kind.Bool, null);
    t.width = (t.align = 1) as i64;
    return t;
}

def is_bool(t: *Type): bool {
    return t.kind == Kind.Bool;
}

/////////// array type ///////////

type Array struct {
    len: i64,
    inner: *Type
}

def new_array(len: i64, inner: *Type): *Type {
    let arr = new Array { len: len, inner: inner };
    let t = new_type(Kind.Array, arr as *void);

    std.flag_unset(&t.flags, flag_unsized);
    if inner != null {
        t.align = inner.align;
        t.width = len * inner.width;
    }
    return t;
}

def (t: *Type) is_array(): bool {
    return t.kind == Kind.Array;
}

def (t: *Type) as_array(): *Array {
    return t.data as *Array;
}

/////////// slice type ///////////

type Slice struct {
    inner: *Type
}

def new_slice(width: usize, inner: *Type): *Type {
    let arr = new Slice { inner: inner };
    let t = new_type(Kind.Slice, arr as *void);

    // slices always have a size
    std.flag_unset(&t.flags, flag_unsized);
    t.width = width as i64 * 2; // pointer + length (usize)
    t.align = width as u32;
    return t;
}

def (t: *Type) is_slice(): bool {
    return t.kind == Kind.Slice;
}

def (t: *Type) as_slice(): *Slice {
    return t.data as *Slice;
}

/////////// pointer type ///////////

// TODO(#22): remember to make the result of pointer subtraction dependent on the
//  pointers types
type Ptr struct {
    inner: *Type
}

// TODO(#28): don't allow pointers to Mod or other non-runtime abstractions (e.g Types)
//  should we actually check this here, or just in the typechecker itself?
def new_ptr(width: usize, inner: *Type): *Type {
    let ptr = new Ptr {
        inner: inner
    };

    let t = new_type(Kind.Ptr, ptr as *void);
    // only auto deref once
    if inner != null && !inner.is_ptr() {
        t.flags = inner.flags;
    }

    // pointers always have a size
    std.flag_unset(&t.flags, flag_unsized);
    t.width = width as i64;
    t.align = width as u32;
    return t;
}

def (t: *Type) is_ptr(): bool {
    return t.kind == Kind.Ptr;
}

def (t: *Type) as_ptr(): *Ptr {
    return t.data as *Ptr;
}

def (t: *Type) is_string(): bool {
    return t.is_ptr()
        && t.as_ptr().inner != null
        // is_i8
        && t.as_ptr().inner.is_char();
}

def (t: *Type) is_signature_pointer(): bool {
    return t.is_ptr()
        && t.as_ptr().inner != null
        && is_signature(t.as_ptr().inner);
}

def (t: *Type) inner_type(): *Type {
    if t.is_ptr() {
        return t.as_ptr().inner;
    }

    if t.is_slice() {
        return t.as_slice().inner;
    }

    return t.as_array().inner;
}

def (t: *Type) update_inner(inner: *Type) {
    if t.is_array() {
        let arr_ty = t.as_array();
        if arr_ty.inner == null {
            arr_ty.inner = inner;
        } else {
            arr_ty.inner.update_inner(inner);
        }

        t.align = arr_ty.inner.align;
        t.width = arr_ty.len * arr_ty.inner.width;
        return;
    } else if t.is_slice() {
        let slice_ty = t.as_slice();
        if slice_ty.inner == null {
            slice_ty.inner = inner;
        } else {
            slice_ty.inner.update_inner(inner);
        }
        return;
    } else if !t.is_ptr() {
        return;
    }

    let p = t.as_ptr();

    if p.inner == null {
        p.inner = inner;
    } else if p.inner.is_ptr() || p.inner.is_array() || p.inner.is_slice() {
        p.inner.update_inner(inner);
    }

    // only auto deref once
    if !p.inner.is_ptr() {
        // use flags from inner type, except for unsized
        t.flags = inner.flags;
    }
    // pointers always have a size
    std.flag_unset(&t.flags, flag_unsized);
}

def (t: *Type) is_indexable(): bool {
    return t.is_array() || t.is_slice();
}

def (t: *Type) is_assignable(): bool {
    return !t.is_array() && is_sized(t);
}

type TemplateParam struct {
    name: ident.Ident
}

def new_template_param(name: ident.Ident): *Type {
    return new_type(Kind.TemplateParam, (new TemplateParam { name: name }) as *void);
}

def (t: *Type) is_template_param(): bool {
    return t.kind == Kind.TemplateParam;
}

def (t: *Type) contains_template_param(): bool {
    if t.is_template_param() {
        return true;
    }

    if t.is_ptr() || t.is_array() || t.is_slice() {
        return t.inner_type().contains_template_param();
    }

    return false;
}

def (t: *Type) template_param_get_name(): ident.Ident {
    if t.is_template_param() {
        return t.as_template_param().name;
    }

    return t.inner_type().template_param_get_name();
}

// This resolves the smalles common type of the template and the substitution
// e.g.
//
// param: ***T
// arg: **i8
// -> null
//
// param: **T
// arg: **i8
// -> i8
//
// param: *T
// arg: **i8
// -> *i8
//
// param: T
// arg: **i8
// -> **i8
//
// param: T
// arg: i8
// -> i8
def (param: *Type) try_substitute(arg: *Type): *Type {
    if param.is_ptr() {
        if !arg.is_ptr() {
            return null;
        }

        return param.as_ptr().inner.try_substitute(arg.as_ptr().inner);
    }

    if param.is_array() {
        if !arg.is_array() {
            return null;
        }

        return param.as_array().inner.try_substitute(arg.as_array().inner);
    }

    if param.is_slice() {
        if !arg.is_slice() {
            return null;
        }

        return param.as_slice().inner.try_substitute(arg.as_slice().inner);
    }

    return arg;
}

def (t: *Type) as_template_param(): *TemplateParam {
    return t.data as *TemplateParam;
}

type MonomorphizationMap struct {
    inner: map.Map, // map.Map[ident.Ident, *Type]
    template_type: *Template
}

def empty_monomorphization_map(): MonomorphizationMap {
    return MonomorphizationMap { inner: map.create(), template_type: null };
}

// def [T] f(*T, [][]T) {}
def (m: *MonomorphizationMap) bind(param: *Type, arg: *Type): bool {
    // just a simple substitution like N -> i32
    if param.is_template_param() {
        let key = param.as_template_param().name.as_key();
        let bound = m.inner.get(key) as *Type;
        if bound == null {
            m.inner.insert(key, arg as *void);
            return true;
        }

        return equals(bound, arg);
    }

    let template_param_name = param.template_param_get_name();
    let smallest_common = param.try_substitute(arg);

    let key = template_param_name.as_key();
    let bound = m.inner.get(key) as *Type;
    if bound == null {
        m.inner.insert(key, smallest_common as *void);
        return true;
    }

    if !equals(bound, smallest_common) {
        return false;
    }

    m.inner.insert(key, smallest_common as *void);
    return true;
}

def (m: *MonomorphizationMap) get_previously_resolved_signature(): *Type {
    let n = m.template_type.instance_maps.len;
    for let i: usize = 0; i < n; i += 1 {
        let other = m.template_type.instance_maps.get_ptr(i) as *MonomorphizationMap;
        if m.equals(other) {
            return other.template_type.instances.get(i) as *Type;
        }
    }

    return null;
}

def (m: *MonomorphizationMap) equals(other: *MonomorphizationMap): bool {
    if m.inner.len != other.inner.len {
        return false;
    }

    let iter = m.inner.iter();
    for let item = iter.next(); item != null; item = iter.next() {
        let bound = other.inner.get(item.key);

        if bound == null {
            return false;
        }

        if !equals(item.value as *Type, bound as *Type) {
            return false;
        }
    }

    return true;
}

def (m: *MonomorphizationMap) into_cloned_signature(): *Type {
    dbg.assert(is_signature(m.template_type.inner), "Cannot convert non sig template to sig");
    let signature = as_signature(m.template_type.inner);
    let signature = signature.clone();

    let number = m.template_type.instances.len as i64;
    let number = str.i64_to_string(number);
    defer number.free();

    let sig = as_signature(signature);
    sig.mangled_name = sig.mangled_name.pushed(number.view());

    m.template_type.instances.push_ptr(signature as *void);
    // move monomap into template instances
    m.template_type.instance_maps.push(m as *void);
    // invalidate old map, so we don't double free it
    m.inner = map.create();

    return signature;
}

def (m: *MonomorphizationMap) cloned_stmt(): *ast.Stmt {
    let clone = m.template_type.statement.clone();
    clone.is_expanded_template = true;
    return clone;
}

def (m: *MonomorphizationMap) iter(): map.Iter {
    return m.inner.iter();
}

def (m: *MonomorphizationMap) free() {
    m.inner.free();
}

type Template struct {
    type_params: ptrvec.Vec, // ptrvec.Vec[*Type]
    // the instanciated versions of this template
    instances: ptrvec.Vec, // ptrvec.Vec[*Type]
    instance_maps: vec.Vec, // vec.Vec[MonomorphizationMap]
    statement: *ast.Stmt,
    inner: *Type
}

def new_template(inner: *Type, stmt: *ast.Stmt, type_params: *typaram.List): *Type {
    let params = ptrvec.with_cap(type_params.len());
    for let i: usize = 0; i < type_params.len(); i += 1 {
        let param = new_template_param(type_params.get_ptr(i).name);
        params.push_ptr(param as *void);
    }

    let template = new Template {
        type_params: params,
        instances: ptrvec.create(),
        instance_maps: vec.create(sizeof MonomorphizationMap),
        statement: stmt,
        inner: inner
    };

    return new_type(Kind.Template, template as *void);
}

def (t: *Template) monomorphization_map(): MonomorphizationMap {
    return MonomorphizationMap { inner: map.with_cap(t.type_params.len), template_type: t };
}

def (t: *Template) type_param_at(idx: usize): *Type {
    return t.type_params.get(idx) as *Type;
}

def (t: *Type) is_template(): bool {
    return t.kind == Kind.Template;
}

def (t: *Type) as_template(): *Template {
    return t.data as *Template;
}

type UserDefinedType struct {
    original_name: ident.Ident,
    mangled_name: name.Owned,
    scope: scope.Scope,
    declared_in: *mod.Module
}

// returns true, if duplicated
def bind_method(t: *Type, name: ident.Ident, method: *Type): bool {
    dbg.assert(t.is_user_defined(), "Trying to bind method on non user defined type");
    dbg.assert(method != null, "Trying to bind null method");
    dbg.assert(is_func(method), "Trying to bind non func type as method");

    let value_scope = get_value_scope(t);
    if value_scope.get_ident(&name).present() {
        return true;
    }

    value_scope.bind_public_ident(&name, method);
    return false;
}

def (t: *Type) is_user_defined(): bool {
    if t.is_ptr() {
        let ptr = t.as_ptr();
        // only recurse once
        return !ptr.inner.is_ptr() && ptr.inner.is_user_defined();
    }

    if t.is_array() {
        return t.as_array().inner.is_user_defined();
    }

    if t.is_slice() {
        return t.as_slice().inner.is_user_defined();
    }

    return is_struct(t) || is_enum(t) || is_union(t);
}

def (t: *Type) get_user_defined(): *UserDefinedType {
    if t.is_ptr() {
        return t.as_ptr().inner.get_user_defined();
    }

    if t.is_array() {
        return t.as_array().inner.get_user_defined();
    }

    if t.is_slice() {
        return t.as_slice().inner.get_user_defined();
    }

    return t.data as *UserDefinedType;
}

def (t: *UserDefinedType) update_field_ty(field_name: *ident.Ident, field_ty: *Type) {
    t.scope.bind_public_ident(field_name, field_ty);
}

/////////// struct type ///////////

type StructField struct {
    name: ident.Ident,
    ty: *Type,
    offset: u64 // gets set during fill_width_align
}

type Struct struct {
    super: UserDefinedType,
    fields: vec.Vec // <StructField>
}

// this function is used to initialize placeholder structs of tychk
def init_struct(
    t: *Type,
    name: ident.Ident,
    mangled_name: name.Owned,
    declared_in: *mod.Module
): void {
    let s = new Struct {
        super: UserDefinedType {
            original_name: name,
            mangled_name: mangled_name,
            scope: scope.with_name(name.ref()),
            declared_in: declared_in
        },
        fields: vec.create(sizeof StructField)
    };

    t.data = s as *void;
    t.width = width_unknown;
    std.flag_set(&t.flags, flag_value_scoped);
}

def is_struct(t: *Type): bool {
    return t.kind == Kind.Struct;
}

def push_field(t: *Struct, name: ident.Ident, ty: *Type): bool {
    let field = StructField { name: name, ty: ty, offset: 0 };
    t.fields.push(&field as *void);

    if t.super.scope.get_ident(&name).found() {
        return true;
    }

    t.super.scope.bind_public_ident(&name, ty);
    return false;
}

// get the index of the field with name 'name'
// returns -1 if the field does not exist
// if out_field_ty is not null, it is set to the type of the field
// TODO(#85): Struct should have a vmap for its fields
def field_idx(t: *Struct, name: ident.Ident, out_field_ty: **Type): i64 {
    for let i: u32 = 0; i < t.num_fields(); i += 1 {
        let f = t.field_at(i);
        if ident.eq_value(&name, &f.name) {
            if out_field_ty != null {
                *out_field_ty = f.ty;
            }
            return i as i64;
        }
    }

    return -1;
}

def (t: *Struct) field_at(i: u32): *StructField {
    return t.fields.get_ptr(i as usize) as *StructField;
}

def (t: *Struct) num_fields(): u32 {
    return t.fields.len as u32;
}

def as_struct(t: *Type): *Struct {
    return t.data as *Struct;
}

/////////// union type ///////////

type UnionField struct {
    name: ident.Ident,
    ty: *Type
}

type Union struct {
    super: UserDefinedType,
    fields: vec.Vec // <UnionField>
}

// this function is used to initialize placeholder unions of tychk
def init_union(t: *Type, name: ident.Ident, mangled_name: name.Owned, declared_in: *mod.Module) {
    let s = new Union {
        super: UserDefinedType {
            original_name: name,
            mangled_name: mangled_name,
            scope: scope.with_name(name.ref()),
            declared_in: declared_in
        },
        fields: vec.create(sizeof UnionField)
    };

    t.data = s as *void;
    t.width = width_unknown;
    std.flag_set(&t.flags, flag_value_scoped);
}

def is_union(t: *Type): bool {
    return t.kind == Kind.Union;
}

def (t: *Union) push_field(name: ident.Ident, ty: *Type): bool {
    let field = UnionField { name: name, ty: ty };
    t.fields.push(&field as *void);

    if t.super.scope.get_ident(&name).found() {
        return true;
    }

    t.super.scope.bind_public_ident(&name, ty);
    return false;
}

def (t: *Union) field_at(i: u32): *UnionField {
    return t.fields.get_ptr(i as usize) as *UnionField;
}

def (t: *Union) num_fields(): u32 {
    return t.fields.len as u32;
}

def (t: *Union) field_with_name(name: ident.Ident): *Type {
    let field = t.super.scope.get_ident(&name);
    if !field.present() {
        return null;
    }

    return field.ty_or_null();
}

def as_union(t: *Type): *Union {
    return t.data as *Union;
}

/////////// enum type ///////////

type EnumValue struct {
    name: ident.Ident,
    value: i32
}

type Enum struct {
    super: UserDefinedType,
    base_ty: *Type, // currently only i32
    values: vmap.Map // vmap.Map<ident.Ident, EnumValue>
}

// this function is used to initialize placeholder enums of tychk
def init_enum(
    t: *Type,
    name: ident.Ident,
    mangled_name: name.Owned,
    declared_in: *mod.Module,
    base_ty: *Type
): void {
    dbg.assert(base_ty != null, "base_ty was null");

    let s = new Enum {
        super: UserDefinedType {
            original_name: name,
            mangled_name: mangled_name,
            scope: scope.with_name(name.ref()),
            declared_in: declared_in
        },
        base_ty: base_ty,
        values: vmap.create(sizeof EnumValue)
    };

    t.data = s as *void;
    std.flag_set(&t.flags, flag_value_scoped);
    fill_width_align(t);
}

def is_enum(t: *Type): bool {
    return t.kind == Kind.Enum;
}

def as_enum(t: *Type): *Enum {
    return t.data as *Enum;
}

def (t: *Enum) num_values(): u32 {
    return t.values.values.len as u32;
}

// returns true, if the value was already in the enum
def push_enum_value(t: *Type, name: ident.Ident, value: i32): bool {
    let e_ty = as_enum(t);
    let key = name.as_key();

    // TODO(#119): instead of a fake "len" value, we should just have a len() compile time function
    if e_ty.values.get_ptr(key) != null || ident.eq_lit(&name, "len") {
        return true;
    }

    let value = EnumValue { name: name, value: value };
    e_ty.values.insert(key, &value as *void);

    let field_type = t;
    // all enum values have the enum itself as their type
    e_ty.super.scope.bind_public_ident(&name, field_type);
    return false;
}

def value_at(t: *Enum, i: u32): *EnumValue {
    return t.values.get_ptr_idx(i as usize) as *EnumValue;
}

def enum_value_by_name(t: *Enum, name: ident.Ident): i32 {
    // since there is no Ident for "len", we just cheat a bit
    if ident.eq_lit(&name, "len") {
        return t.values.len() as i32;
    }

    let key = name.as_key();
    return (t.values.get_ptr(key) as *EnumValue).value;
}

/////////// func type ///////////

type Param struct {
    name: ident.Ident,
    ty: *Type
}

def create_param(name: ident.Ident, ty: *Type): Param {
    return Param { name: name, ty: ty };
}

type Signature struct {
    func: *Type,
    declared_in: *mod.Module,
    name: ident.Ident,
    mangled_name: name.Owned
}

def is_signature(t: *Type): bool {
    return t.kind == Kind.Signature;
}

def as_signature(t: *Type): *Signature {
    return t.data as *Signature;
}

def (s: *Signature) clone(): *Type {
    let new_func = new *as_func(s.func);
    let new_func = new_type(Kind.Func, new_func as *void);
    std.flag_set(&new_func.flags, flag_unsized);

    let mangled_name = s.mangled_name.clone();

    let new_sig = new *s;
    new_sig.func = new_func;
    new_sig.mangled_name = mangled_name;

    let t = new_type(Kind.Signature, new_sig as *void);
    std.flag_set(&t.flags, flag_unsized);
    return t;
}

type Func struct {
    is_extern: bool,
    is_varargs: bool,
    is_method: bool,
    receiver_patched: bool,
    receiver: Param,
    ret: *Type,
    params: vec.Vec // <Param>
}

// this function is used to initialize placeholder signatures of tychk
def init_signature(
    t: *Type,
    name: ident.Ident,
    mangled_name: name.Owned,
    declared_in: *mod.Module,
    is_extern: bool
) {
    let func = new Func {
        is_extern: is_extern,
        // the way that tychk currently works, is that this is set lazily, while
        // checking the parameters types
        is_varargs: false,
        is_method: false,
        receiver_patched: false,
        receiver: Param { name: ident.empty(), ty: null },
        ret: null,
        params: vec.create(sizeof Param)
    };

    let func = new_type(Kind.Func, func as *void);
    std.flag_set(&func.flags, flag_unsized);

    let sig = new Signature {
        func: func,
        declared_in: declared_in,
        name: name,
        mangled_name: mangled_name
    };

    std.flag_set(&t.flags, flag_unsized);
    t.data = sig as *void;
}

def (old_method: *Func) as_normal_function(): *Type {
    let new_type = new_type(Kind.Func, null);

    let func = new Func {
        is_extern: old_method.is_extern,
        is_varargs: old_method.is_varargs,
        is_method: false,
        receiver_patched: true,
        receiver: Param { name: ident.empty(), ty: null },
        ret: old_method.ret,
        params: vec.create(sizeof Param)
    };
    std.flag_set(&new_type.flags, flag_unsized);
    new_type.data = func as *void;

    let new_func = as_func(new_type);

    let params = vec.with_cap(sizeof Param, old_method.params.len + 1);
    params.push(&old_method.receiver as *void);
    for let i: u32 = 0; i < old_method.num_params(); i += 1 {
        params.push(old_method.param_at(i) as *void);
    }

    new_func.params = params;

    return new_type;
}

// it is better to treat the receiver type differently during typechecking, since it has
// different restrictions than normal parameters. However we don't want to check is_method all
// the time during code generation, so we just push the receiver as the first argument during
// ir compilation
def patch_receiver_into_params(t: *Func) {
    if !t.is_method || t.receiver_patched {
        return;
    }

    t.params.push_front(&t.receiver as *void);
    // only do this once
    t.receiver_patched = true;
}

def should_auto_ref_receiver(t: *Func): bool {
    return t.receiver.ty.is_ptr() && !t.receiver.ty.as_ptr().inner.is_ptr();
}

// TODO(#33): this is inefficient
//  do we actually need to iterate everything all the time? We don't want to
//  iterate over the params, which were already initialized last time
def func_is_initalized(t: *Func): bool {
    if t.ret == null {
        return false;
    }

    for let i: u32 = 0; i < t.num_params(); i += 1 {
        let p = t.param_at(i);
        if p.ty == null {
            return false;
        }
    }

    return true;
}

// returns: idx of param with name or -1
def find_param_idx(t: *Func, name: *ident.Ident): i64 {
    for let i: u32 = 0; i < t.num_params(); i += 1 {
        let p = t.param_at(i);
        if ident.eq_value(&p.name, name) {
            return i as i64;
        }
    }
    return -1;
}

def (t: *Func) num_params(): u32 {
    return t.params.len as u32;
}

def (t: *Func) param_at(i: u32): *Param {
    return t.params.get_ptr(i as usize) as *Param;
}

def is_func(t: *Type): bool {
    return t.kind == Kind.Func || t.kind == Kind.Signature;
}

def as_func(t: *Type): *Func {
    if is_signature(t) {
        return as_signature(t).func.data as *Func;
    }

    return t.data as *Func;
}

def is_callable(t: *Type): bool {
    return is_func(t)
        || (t.is_ptr() && !t.as_ptr().inner.is_ptr() && is_func(t.as_ptr().inner))
        || t.is_template() && is_callable(t.as_template().inner);
}

def callable_as_func(t: *Type): *Func {
    if is_func(t) {
        return as_func(t);
    } else if t.is_template() {
        return as_func(t.as_template().inner);
    } else if t.is_ptr() && t.as_ptr().inner != null && is_func(t.as_ptr().inner) {
        return as_func(t.as_ptr().inner);
    }
    return null;
}

/////////// mod type ///////////

type Mod struct {
    types: scope.Scope,
    values: scope.Scope
}

def new_mod(name: name.Ref): *Type {
    let m = new Mod {
        types: scope.with_name(name),
        values: scope.with_name(name)
    };

    let t = new_type(Kind.Mod, m as *void);

    std.flag_set(&t.flags, flag_type_scoped);
    std.flag_set(&t.flags, flag_value_scoped);
    std.flag_set(&t.flags, flag_unsized);

    return t;
}

def is_mod(t: *Type): bool {
    return t.kind == Kind.Mod;
}

def as_mod(t: *Type): *Mod {
    return t.data as *Mod;
}

/////////// base type ///////////

type Type struct {
    kind: Kind,
    width: i64, // width in bytes
    align: i32,
    flags: i32,
    data: *void // extra data, eg. 'Struct' or 'Func'
}

def new_type(kind: Kind, data: *void): *Type {
    return new create_type(kind, data);
}

def was_touched_by_tychk(t: *Type): bool {
    return std.flag_get(&t.flags, flag_tychk_touched);
}

def tychk_touch(t: *Type): void {
    std.flag_set(&t.flags, flag_tychk_touched);
}

def tychk_untouch(t: *Type): void {
    std.flag_unset(&t.flags, flag_tychk_touched);
}

def create_type(kind: Kind, data: *void): Type {
    return Type {
        kind: kind,
        width: width_unknown,
        align: 0,
        flags: 0,
        data: data
    };
}

def is_sized(t: *Type): bool {
    return !std.flag_get(&t.flags, flag_unsized);
}

def (t: *Type) set_sized(value: bool) {
    if value {
        std.flag_unset(&t.flags, flag_unsized);
    } else {
        std.flag_set(&t.flags, flag_unsized);
    }
}

// if the type is not unsized and the with is unknown it wasn't
// constructed correctly
def is_initialized(t: *Type): bool {
    return t != null
        && ((t.width != width_unknown && t.align > 0) || std.flag_get(&t.flags, flag_unsized));
}

def is_type_scoped(t: *Type): bool {
    if t == null {
        return false;
    }

    return std.flag_get(&t.flags, flag_type_scoped);
}

def is_value_scoped(t: *Type): bool {
    if t == null {
        return false;
    }

    return std.flag_get(&t.flags, flag_value_scoped);
}

def free_user_defined_type(user_defined: *UserDefinedType) {
    name.free_owned(&user_defined.mangled_name);
    scope.free_s(&user_defined.scope);
}

def (t: *Type) is_declared_in(m: *mod.Module): bool {
    if t.is_user_defined() || t.is_ptr() && t.as_ptr().inner.is_user_defined() {
        return t.get_user_defined().declared_in == m;
    }

    if is_signature(t) {
        return as_signature(t).declared_in == m;
    }

    return false;
}

def free_ty(t: *Type) {
    if t == null {
        return;
    }

    defer delete t;

    if is_signature(t) {
        let sig = as_signature(t);
        name.free_owned(&sig.mangled_name);
        free_ty(sig.func);
        delete t.data;
        return;
    }

    if is_func(t) {
        let f_ty = as_func(t);
        // the inner types are garbage collected by tychk
        f_ty.params.free();
        delete t.data;
        return;
    }

    if is_struct(t) {
        let s_ty = as_struct(t);
        free_user_defined_type(&s_ty.super);
        // the inner types are garbage collected by tychk
        s_ty.fields.free();
        delete t.data;
        return;
    }

    if is_enum(t) {
        let e_ty = as_enum(t);
        free_user_defined_type(&e_ty.super);
        e_ty.values.free();
        delete t.data;
        return;
    }

    if is_union(t) {
        let u_ty = as_union(t);
        free_user_defined_type(&u_ty.super);
        // the inner types are garbage collected by tychk
        u_ty.fields.free();
        delete t.data;
        return;
    }

    if t.is_template() {
        let template = t.as_template();
        for let i: usize = 0; i < template.type_params.len; i += 1 {
            free_ty(template.type_params.get(i) as *Type);
        }
        template.type_params.free();

        for let i: usize = 0; i < template.instances.len; i += 1 {
            free_ty(template.instances.get(i) as *Type);
        }
        template.instances.free();

        for let i: usize = 0; i < template.instance_maps.len; i += 1 {
            let mono_map = template.instance_maps.get_ptr(i) as *MonomorphizationMap;
            mono_map.free();
        }
        template.instance_maps.free();
        delete t.data;
        return;
    }

    if is_mod(t) {
        let m_ty = as_mod(t);
        scope.free_s(&m_ty.values);
        scope.free_s(&m_ty.types);
        delete t.data;
        return;
    }

    if t.is_integer() || t.is_ptr() || t.is_array() || t.is_slice() || t.is_template_param() {
        delete t.data;
        return;
    }
}

def lookup_value_in(t: *Type, name: *ident.Ident): symbol.Data {
    if !is_value_scoped(t) {
        return symbol.empty();
    }

    if is_enum(t) && ident.eq_lit(name, "len") {
        let e_ty = as_enum(t);
        return symbol.create_public(e_ty.base_ty).with_scope(&e_ty.super.scope);
    }

    let value_scope = get_value_scope(t);
    dbg.assert(value_scope != null, "null value scope on value_scoped type");

    return value_scope.get_ident(name);
}

def lookup_type_in(t: *Type, name: *ident.Ident): symbol.Data {
    if !is_type_scoped(t) {
        return symbol.empty();
    }

    let type_scope = get_type_scope(t);
    dbg.assert(type_scope != null, "null type scope on type_scoped type");

    return type_scope.get_ident(name);
}

// looks for an ident in types with flag_value_scoped
def get_value_scope(t: *Type): *scope.Scope {
    if t.is_user_defined() {
        return &t.get_user_defined().scope;
    }

    if is_mod(t) {
        return &as_mod(t).values;
    }

    if t.is_ptr() {
        return get_value_scope(t.as_ptr().inner);
    }

    return null;
}

def get_type_scope(t: *Type): *scope.Scope {
    if is_mod(t) {
        return &as_mod(t).types;
    }

    return null;
}

def (t: *Type) is_num(): bool {
    return t.is_integer() || t.is_float();
}

def (t: *Type) is_float(): bool {
    return is_f32(t) || is_f64(t);
}

def (t: *Type) width_in_bits(): u64 {
    return t.width as u64 * 8;
}

def (t: *Type) align_in_bits(): u32 {
    return t.align as u32 * 8;
}

def is_comparable(t: *Type): bool {
    return t.is_num()
        || t.is_ptr()
        || is_enum(t);
}

def can_be_casted(from: *Type, into: *Type): bool {
    return from.is_ptr() && into.is_ptr()
        || (from.is_num() && into.is_num())
        || (from.is_integer() && is_bool(into))
        || (is_bool(from) && into.is_integer())
        || (is_enum(from) && equals(as_enum(from).base_ty, into))
        || equals(from, into);
}

/////////// align utils ///////////
// TODO(#36): should be in separate file, but can't because of circular imports

def width_was_calculated(t: *Type): bool {
    return t.align > 0;
}

// returns true, if the struct has uninitialized fields
def calc_struct_width_align(s_ty: *Struct, width: *i64, align: *i32): bool {
    let max_align: i32 = 1;
    let width_sum: i64 = 0;

    for let i: u32 = 0; i < s_ty.num_fields(); i += 1 {
        let f = s_ty.field_at(i);
        if f == null || !is_initialized(f.ty) {
            return true;
        }

        if f.ty.align > max_align {
            max_align = f.ty.align;
        }

        // s: string,  width: 8, align: 8, offset: 0,  padding: 0    , width_sum: 8
        // c: i8,    width: 1, align: 1, offset: 8,  padding: 0    , width_sum: 9
        // x: i32      width: 4, align: 4, offset: 12, padding: 4 - 1,

        let padding: i64 = 0;
        let rem = width_sum % (f.ty.align as i64);
        if width_sum > 0 && rem != 0 {
            padding = f.ty.align as i64 - rem;
        }

        f.offset = (width_sum + padding) as u64;

        let real_width = f.ty.width + padding;
        width_sum = width_sum + real_width;
    }

    let rem = width_sum % (max_align as i64);
    if rem != 0 {
        width_sum = width_sum + (max_align as i64 - rem);
    }

    *width = width_sum;
    *align = max_align;

    return false;
}

// returns true, if the union has uninitialized fields
def calc_union_width_align(u_ty: *Union, width: *i64, align: *i32): bool {
    let max_width: i64 = 0;
    let max_align: i32 = 1;

    for let i: u32 = 0; i < u_ty.num_fields(); i += 1 {
        let f = u_ty.field_at(i);
        if f == null || !is_initialized(f.ty) {
            return true;
        }

        if f.ty.align > max_align {
            max_align = f.ty.align;
        }

        if f.ty.width > max_width {
            max_width = f.ty.width;
        }
    }

    *width = max_width;
    *align = max_align;

    return false;
}

// TODO(#38): implement either lookup table or full method dispatching for Type
// returns true, if the types width/alignment could be calculated
def fill_width_align(t: *Type): bool {
    if std.flag_get(&t.flags, flag_unsized) {
        return false;
    }

    if width_was_calculated(t) {
        return true;
    }

    // if align is 0 at end of this function, use width as align
    let align: i32 = 0;
    let width = width_unknown;
    let has_unresolved_fields = false;

    if is_struct(t) {
        let s_ty = as_struct(t);
        has_unresolved_fields = calc_struct_width_align(s_ty, &width, &align);
    } else if is_enum(t) {
        let e_ty = as_enum(t);
        fill_width_align(e_ty.base_ty);
        width = e_ty.base_ty.width;
        align = e_ty.base_ty.align;
    } else if is_union(t) {
        let u_ty = as_union(t);
        has_unresolved_fields = calc_union_width_align(u_ty, &width, &align);
    }

    if has_unresolved_fields {
        return false;
    }

    t.width = width;
    t.align = align;
    return true;
}

// returns true if the string needs to be freed
def to_string(t: *Type): str.String {
    return to_string_mangled(t, true);
}

// returns true if the string needs to be freed
def to_string_mangled(t: *Type, use_mangled: bool): str.String {
    if t == null {
        return str.create();
    }

    if t.is_integer() {
        let s = str.from("");
        if t.is_signed() {
            s.push(str.view("i", 1));
        } else {
            s.push(str.view("u", 1));
        }

        if t.as_integer().target_dependent {
            s.push(str.view("size", 4));
            return s;
        }

        let buffer: i32 = 0;
        let len = std.snprintf(&buffer as string, 3 as usize, "%lu", t.width_in_bits()) as usize;
        s.push(str.view(&buffer as string, len));
        return s;
    }

    if is_signature(t) {
        return to_string_mangled(as_signature(t).func, use_mangled);
    }

    if is_func(t) {
        let f_ty = as_func(t);

        let s_ret = to_string_mangled(f_ty.ret, use_mangled);
        defer s_ret.free();

        let params_string = str.create();
        defer params_string.free();

        for let i: u32 = 0; i < f_ty.params.len as u32; i += 1 {
            if i > 0 {
                params_string.push(str.view(", ", 2));
            }

            let p = f_ty.param_at(i);

            let p_ty_s = to_string_mangled(p.ty, use_mangled);
            defer p_ty_s.free();

            params_string.push(p_ty_s.view());
        }

        let s_extern = "";
        if f_ty.is_extern {
            s_extern = "extern ";
        }

        let len: usize = 0;
        let s = std.l_format_str(&len, "%s(%s) -> %s", s_extern, params_string.cstring(), s_ret.cstring());
        defer delete s;

        return str.from_l(s, len);
    }

    if t.is_ptr() {
        if t.is_string() {
            return str.from("string");
        }

        let ptr_ty = t.as_ptr();
        let s = str.from("*");

        let inner = to_string_mangled(ptr_ty.inner, use_mangled);
        defer inner.free();

        s.push(inner.view());
        return s;
    }

    if t.is_array() {
        let arr_ty = t.as_array();

        let len: usize = 0;
        let s = "";
        if arr_ty.len >= 0 {
            s = std.l_format_str(&len, "[%lu]", arr_ty.len);
        } else {
            s = std.l_format_str(&len, "[_]");
        }
        defer delete s;
        let s = str.from_l(s, len);

        let inner = to_string_mangled(arr_ty.inner, use_mangled);
        defer inner.free();

        s.push(inner.view());
        return s;
    }

    if t.is_slice() {
        let slice_ty = t.as_slice();
        let s = str.from("[]");

        let inner = to_string_mangled(slice_ty.inner, use_mangled);
        defer inner.free();

        s.push(inner.view());
        return s;
    }

    if t.is_user_defined() {
        if use_mangled {
            return t.get_user_defined().mangled_name.to_string();
        }

        return t.get_user_defined().original_name.to_string();
    }

    if t.is_template_param() {
        let param = t.as_template_param();
        return str.from_l(param.name.start(), param.name.len());
    }

    return str.from(to_static_string(t));
}

def to_static_string(t: *Type): string {
    // since string is just an alias, this would normaly output 'pointer'
    if t.is_string() {
        return "string";
    }

    return type2str(t.kind as i32);
}

def equals(first: *Type, second: *Type): bool {
    if first == second {
        return true;
    }

    if first == null || second == null {
        return false;
    }

    if is_signature(first) {
        return equals(as_signature(first).func, second);
    }

    if is_signature(second) {
        return equals(first, as_signature(second).func);
    }

    if first.kind != second.kind {
        return false;
    }

    if is_func(first) && is_func(second) {
        let first = as_func(first);
        let second = as_func(second);

        if first.is_extern != second.is_extern {
            return false;
        }

        if !equals(first.ret, second.ret) {
            return false;
        }

        if first.params.len != second.params.len {
            return false;
        }

        for let i: u32 = 0; i < first.params.len as u32; i = i + 1 {
            if !equals(first.param_at(i).ty, second.param_at(i).ty) {
                return false;
            }
        }

        return true;
    }

    if first.is_ptr() {
        return equals(first.as_ptr().inner, second.as_ptr().inner);
    }

    if first.is_array() {
        return first.as_array().len == second.as_array().len
            && equals(first.as_array().inner, second.as_array().inner);
    }

    if first.is_slice() {
        return equals(first.as_slice().inner, second.as_slice().inner);
    }

    if first.is_integer() {
        return first.width == second.width
            && first.as_integer().target_dependent == second.as_integer().target_dependent;
    }

    return false;
}
