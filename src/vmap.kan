import "std";
import "map";
import "vec";
import "ident";

type Map struct {
    mappings: map.Map, // map.Map<Key, usize (index into values)>
    values: vec.Vec
}

def create_key(len: usize, value: string): map.Key {
    return map.create_key(len, value);
}

def key_from_ident(i: *ident.Ident): map.Key {
    return map.key_from_ident(i);
}

def create(elem_size: usize): Map {
    return Map {
        mappings: map.create(),
        values: vec.create(elem_size)
    };
}

def (m: *Map) len(): usize {
    return m.values.len;
}

def (m: *Map) free() {
    m.mappings.free();
    m.values.free();
}

// inserts value into map at key
def (m: *Map) insert(key: map.Key, value: *void) {
    let idx = m.values.len + 1;
    m.mappings.insert(key, std.int_to_ptr(idx));

    m.values.push(value);
}

def (m: *Map) get_ptr(key: map.Key): *void {
    let idx_p = m.mappings.get(key);
    if idx_p == null {
        return null;
    }

    let idx = std.ptr_to_int(idx_p) - 1;
    return m.values.get_ptr(idx);
}

def (m: *Map) get_ptr_idx(idx: usize): *void {
    return m.values.get_ptr(idx);
}

def (m: *Map) dump() {
    m.mappings.dump();
}
