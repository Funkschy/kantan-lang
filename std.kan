extern def malloc(size: usize): *void;
extern def calloc(num: usize, size: usize): *void;
extern def free(obj: *void): void;
extern def strcmp(s1: string, s2: string): usize;
extern def strncmp(s1: string, s2: string, n: usize): usize;
extern def strndup(s: string, len: usize): string;
extern def strdup(s: string): string;
extern def strlen(s: string): usize;
extern def strcat(first: string, second: string): string;
extern def strncat(first: string, second: string, len: usize): string;
extern def strcpy(dest: string, src: string): string;
extern def strchr(haystack: string, needle: i32): string;
extern def strrchr(haystack: string, needle: i32): string;
extern def memcmp(first: *void, second: *void, size: usize): i32;
extern def memset(p: *void, val: i32, n: usize): *void;
extern def memcpy(dest: *void, src: *void, size: usize): void;
extern def memmove(dest: *void, src: *void, size: usize): void;
extern def realloc(ptr: *void, size: usize): *void;
extern def abort(): void;
extern def strerror(err: i32): string;
extern def getenv(name: string): string;

// in lib.c
extern def get_errno(): i32;
extern def format_str(fmt: string, ...): string;
extern def l_format_str(len: *usize, fmt: string, ...): string;
extern def read_char(s: string, s_len: usize, dest: *i32): i32;
extern def ptr_to_int(p: *void): usize;
extern def int_to_ptr(i: usize): *void;
extern def bool_to_int(b: bool): usize;
extern def int_to_bool(i: usize): bool;
extern def int_num_digits(i: usize): usize;
extern def flag_set(flags: *i32, flag: i32): void;
extern def flag_unset(flags: *i32, flag: i32): void;
extern def flag_get(flags: *i32, flag: i32): bool;

def find_char(haystack: string, needle: i8): string {
    return strchr(haystack, needle as i32);
}

def find_last_char(haystack: string, needle: i8): string {
    return strrchr(haystack, needle as i32);
}

def next_pow_of_2(n: i64): i64 {
    if n == 0 {
        return 0;
    }

    let n = n - 1;

    n |= n >> 1;
    n |= n >> 2;
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    n |= n >> 32;

    return n + 1;
}

