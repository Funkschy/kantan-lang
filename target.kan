import "dbg";
import "std";
import "str";
import "path";
import "llvm-bindings" as llvm;

type Arch enum {
    X86_64, Wasm32
}

type Vendor enum {
    None, Unknown, PC, Apple
}

type Sys enum {
    None, Linux, Darwin, Win32
}

type Abi enum {
    None, Empty, Gnu, Msvc
}

def (a: Arch) to_string(): str.String {
    if a == Arch.X86_64 {
        return str.from("x86_64");
    }
    if a == Arch.Wasm32 {
        return str.from("wasm32");
    }
    return str.from("");
}

def (a: Arch) register() {
    if a == Arch.X86_64 {
        llvm.initialize_x86_target_info();
        llvm.initialize_x86_target();
        llvm.initialize_x86_target_mc();
        llvm.initialize_x86_asm_printer();
        return;
    }

    if a == Arch.Wasm32 {
        llvm.initialize_web_assembly_target_info();
        llvm.initialize_web_assembly_target();
        llvm.initialize_web_assembly_target_mc();
        llvm.initialize_web_assembly_asm_printer();
        return;
    }

    dbg.assert_fmt(0 == 1, "unknown target architecture: %d", a);
}

def (a: Arch) pointer_width_bits(): u32 {
    if a == Arch.X86_64 {
        return 64;
    }
    return 32;
}

def (v: Vendor) to_string(): str.String {
    if v == Vendor.Unknown {
        return str.from("unknown");
    }
    if v == Vendor.PC {
        return str.from("pc");
    }
    if v == Vendor.Apple {
        return str.from("apple");
    }

    return str.from("");
}

def (s: Sys) to_string(): str.String {
    if s == Sys.Linux {
        return str.from("linux");
    }
    if s == Sys.Darwin {
        return str.from("darwin");
    }
    if s == Sys.Win32 {
        return str.from("win32");
    }

    return str.from("");
}

def (a: Abi) to_string(): str.String {
    if a == Abi.Gnu {
        return str.from("gnu");
    }
    if a == Abi.Msvc {
        return str.from("msvc");
    }

    return str.from("");
}

type Target struct {
    is_error: bool,
    arch: Arch,
    vendor: Vendor,
    sys: Sys,
    abi: Abi,
    lltarget: *llvm.Target,
    triple_or_error: str.String // llvm message
}

def create_and_register_target(a: Arch, v: Vendor, sys: Sys, abi: Abi): Target {
    let target = Target {
        is_error: false,
        arch: a,
        vendor: v,
        sys: sys,
        abi: abi,
        lltarget: null,
        triple_or_error: undefined
    };

    a.register();

    let target_arr: [4]str.String = undefined;
    target_arr[0] = a.to_string();
    target_arr[1] = v.to_string();
    target_arr[2] = sys.to_string();
    target_arr[3] = abi.to_string();

    let triple = str.from("");
    defer triple.free();

    for let i = 0; i < 4; i += 1 {
        let part = &target_arr[i];
        if part.len() == 0 {
            continue;
        }

        if i > 0 {
            triple.push(str.view(1, "-"));
        }

        triple.push(part.view());
    }

    let lltarget: *llvm.Target = null;
    let error: string = null;
    if llvm.get_target_from_triple(triple.cstring(), &lltarget, &error) {
        target.is_error = true;
        target.triple_or_error = str.from(error);
        llvm.dispose_message(error);
        return target;
    }

    target.lltarget = lltarget;
    target.triple_or_error = triple.clone();
    return target;
}

def (t: *Target) pointer_width_bits(): u32 {
    return t.arch.pointer_width_bits();
}

def (t: *Target) free() {
    t.triple_or_error.free();
}

type TargetMachine struct {
    lltm: *llvm.TargetMachine
}

def create_target_machine(target: *Target): TargetMachine {
    dbg.assert(!target.is_error, "passed error target to create_target_machine");

    let default_code_opt_level = 2;
    // we currently want our code to be psysition independent, so that we can
    // link it easily
    let reloc_mode_pic = 2;
    let code_model_default = 0;

    let tm = llvm.create_target_machine(
        target.lltarget,
        target.triple_or_error.cstring(),
        "generic", // cpu type
        "", // features
        default_code_opt_level,
        reloc_mode_pic,
        code_model_default
    );

    dbg.assert(tm != null, "could not create TargetMachine");

    return TargetMachine {
        lltm: tm
    };
}

def (tm: *TargetMachine) free() {
    llvm.dispose_target_machine(tm.lltm);
}

// returns null or an error message
def emit_to_file(
    tm: *TargetMachine,
    mod: *llvm.Module,
    out: path.Path,
    asm: bool
): string {
    let gen_type = 1; // object file
    if asm {
        gen_type = 0; // assembly file
    }

    let file = std.strndup(out.inner, out.len);
    let err: string = null;
    if llvm.target_machine_emit_to_file(tm.lltm, mod, file, gen_type, &err) {
        delete file;
        return err;
    }

    delete file;
    return null;
}
