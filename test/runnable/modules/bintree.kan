import "io";

def (p: Person) test() {
    *p.name; // name should not be null
}

def x() {
    Person {name: "test", age: 5}.test();
}

type Person struct {
    name: string,
    age: i32
}

type Node struct {
    data: Person,
    left: *Node,
    right: *Node
}

def new_node(person: Person): *Node {
    return new Node { data: person, left: null, right: null };
}

def (tree: *Tree) insert(person: Person) {
    x(); // just for test purposes
    if tree.root == null {
        tree.root = new_node(person);
        return;
    }

    tree.root.insert(person);
}

type Tree struct {
    root: *Node
}

def (node: *Node) insert(person: Person) {
    if node.data.age == person.age {
        return;
    }

    if person.age < node.data.age {
        if node.left == null {
            node.left = new_node(person);
        } else {
            node.left.insert(person);
        }
    } else {
        if node.right == null {
            node.right = new_node(person);
        } else {
            node.right.insert(person);
        }
    }
}

def (tree: *Tree) traverse() {
    if tree.root == null {
        return;
    }

    tree.root.traverse();
}

def (node: *Node) traverse() {
    if node == null {
        return;
    }

    node.left.traverse();
    io.printf("%s is %d years old\n", node.data.name, node.data.age);
    node.right.traverse();
}

def (tree: *Tree) free() {
    tree.root.free();
}

def (node: *Node) free() {
    if node == null {
        return;
    }

    node.left.free();
    node.right.free();
    delete node;
}
