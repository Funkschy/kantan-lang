import "ast";
import "ptrvec";
import "span";
import "mod";
import "map";

extern def isort(arr: *i32, len: i32): *i32;

type Ctx struct {
    mod: *mod.Module,
    import_map: map.Map
}

def empty_ctx(): Ctx {
    return Ctx { mod: null, import_map: map.create() };
}

def create_ctx(mod: *mod.Module): Ctx {
    let import_map = map.with_cap(mod.num_imports(mod));
    return Ctx {
        mod: mod,
        import_map: import_map
    };
}

def free_ctx(ctx: *Ctx): void {
    map.free_m(&ctx.import_map);
}

type TypeChecker struct {
    span_interner: *span.SpanInterner,
    mods: *mod.Map,
    sorted_mods: *i32,
    ctx: Ctx
}

def create(span_interner: *span.SpanInterner, mods: *mod.Map): TypeChecker {
    return TypeChecker {
        span_interner: span_interner,
        mods: mods,
        sorted_mods: sorted_mods(mods),
        ctx: empty_ctx()
    };
}

def sorted_mods(mods: *mod.Map): *i32 {
    let num_mods = mod.num_mods(mods);
    let import_nums = std.malloc(num_mods * sizeof i32) as *i32;

    let i = 0;
    while i < num_mods {
        let m = mod.get_mod(mods, i);
        *(import_nums + i) = mod.num_imports(m);
        i = i + 1;
    }

    let sorted_mods = isort(import_nums, num_mods);
    delete import_nums;

    return sorted_mods;
}

def check(tc: *TypeChecker): void {
    let i = 0;
    while i < mod.num_mods(tc.mods) {
        let idx = *(tc.sorted_mods + i);
        let m = mod.get_mod(tc.mods, idx);

        check_mod(tc, m);

        i = i + 1;
    }
}

def check_mod(tc: *TypeChecker, mod: *mod.Module): void {
     // free previous context
    free_ctx(&tc.ctx);
    tc.ctx = create_ctx(mod);
    let s = path.to_string(&mod.path);
    io.printf("%s %d\n", s, mod.num_imports(mod));
    delete s;
}

def check_expr(tc: *TypeChecker, e: *ast.Expr): *ast.Expr {
    return e;
}

def free_tc(tc: *TypeChecker): void {
    free_ctx(&tc.ctx);
    delete tc.sorted_mods;
}
