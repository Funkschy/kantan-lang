#include "ty_types.h"
#include "std.h"

import "ast";
import "ptrvec";
import "vec";
import "span";
import "mod";
import "map";
import "scope";
import "path";
import "ident";
import "record";
import "func";

import "std";
// TODO: only temp solution
import "io";

extern def isort(arr: *i32, len: i32): *i32;

#define WAITING_TYPE 1
#define WAITING_PTR  2

// Used as some kind of callback
// When we resolve statements it may happen, that the statement uses type we
// have not yet resolved. In this case a waiting request will be placed for the
// correspoding type in the correspoding module.
// After a type has been resolved, tychk will check if there are pending requests
// for this type and resolve them accordingly.
type WaitingRequest struct {
    kind: i32,
    field_idx: i32,
    to_fill: *ty.Type,
    to_fill_mod: *mod.Module,
    waiting_for: ident.Ident,
    waiting_for_mod: *mod.Module
}

def create_waiting_request(
    kind: i32,
    to_fill: *ty.Type,
    to_fill_mod: *mod.Module,
    waiting_for: ident.Ident,
    waiting_for_mod: *mod.Module,
    field_idx: i32
): WaitingRequest {
    return WaitingRequest {
        kind: kind,
        field_idx: field_idx,
        to_fill: to_fill,
        to_fill_mod: to_fill_mod,
        waiting_for: waiting_for,
        waiting_for_mod: waiting_for_mod
    };
}

def req_waiting_for_ident(r: *WaitingRequest): *ident.Ident {
    return &r.waiting_for;
}

type WaitingRequestMap struct {
    init_flag: i32, // used to check if this is zeroed memory
    requests: vec.Vec, // Vec<Vec<WaitingRequest>>
    request_map: map.Map // Map<Type Ident, index into requests>
}

def create_waiting_request_map(): WaitingRequestMap {
    let map = WaitingRequestMap {
        init_flag: 1,
        requests: vec.create(sizeof vec.Vec),
        request_map: map.create()
    };

    return map;
}

def add_request(wrm: *WaitingRequestMap, si: *span.SpanInterner, request: WaitingRequest): void {
    let requests: *vec.Vec = null;

    let ident = req_waiting_for_ident(&request);
    // ------
        let s = ident.to_string(ident, si);
        let kind_s = "struct";
        if request.kind == WAITING_PTR {
            kind_s = "ptr";
        }
        io.printf("DBG: >>> Adding %s request for '%s'\n", kind_s, s);
        delete s;
    // ------

    let key = map.key_from_ident(si, ident);
    let request_idx = map.get(&wrm.request_map, key);
    let idx = -1;

    if std.ptr_to_int(request_idx) == 0 {
        // create new vector
        idx = wrm.requests.len;
        let v = vec.create(sizeof WaitingRequest);
        vec.push(&wrm.requests, &v as *void);

        // push its idx into the map
        request_idx = std.int_to_ptr(idx);
        // add one, to be able to tell null apart from 0
        map.insert(&wrm.request_map, key, request_idx + 1);
    } else {
        idx = std.ptr_to_int(request_idx) - 1;
    }

    requests = vec.get_ptr(&wrm.requests, idx) as *vec.Vec;
    vec.push(requests, &request as *void);
}

def get_waiting(wrm: *WaitingRequestMap, si: *span.SpanInterner, ident: *ident.Ident): *vec.Vec {
    let key = map.key_from_ident(si, ident);
    let request_idx = map.get(&wrm.request_map, key);

    if request_idx == null {
        return null;
    }

    let idx = std.ptr_to_int(request_idx) - 1;
    return vec.get_ptr(&wrm.requests, idx) as *vec.Vec;
}

def free_wait_map(wrm: *WaitingRequestMap): void {
    let i = 0;
    while i < wrm.requests.len {
        let v = vec.get_ptr(&wrm.requests, i) as *vec.Vec;
        vec.free_v(v);
        i = i + 1;
    }

    vec.free_v(&wrm.requests);
    map.free_m(&wrm.request_map);
}

type TypeError struct {
    text: string,
    span: span.Span
}

def err(tc: *TypeChecker, text: string, span: span.Span): TypeError {
    return TypeError { text: text, span: span };
}

def free_err(err: *TypeError): void {
    delete err.text;
}

type Ctx struct {
    mod: *mod.Module,
    imports: map.Map, // <string, *mod.Module>
    scopes: scope.ScopeStack
}

def empty_ctx(): Ctx {
    return Ctx {
        mod: null,
        imports: map.create(),
        scopes: scope.empty_stack()
    };
}

def create_ctx(mod: *mod.Module, si: *span.SpanInterner, global: *scope.Scope): Ctx {
    let scopes = scope.create_stack(si);
    scope.push_scope(&scopes, global);
    scope.push_scope(&scopes, &mod.ty.scope);
    scope.open_scope(&scopes);

    return Ctx {
        mod: mod,
        imports: map.create(),
        scopes: scopes
    };
}

def free_ctx(ctx: *Ctx): void {
    scope.free_stack(&ctx.scopes);
    map.free_m(&ctx.imports);
}

def get_mod_by_alias(ctx: *Ctx, alias_len: i32, alias: string): *mod.Module {
    return map.get(&ctx.imports, map.create_key(alias_len, alias)) as *mod.Module;
}

type TypeChecker struct {
    span_interner: *span.SpanInterner,
    mods: *mod.Map,
    sorted_mods: *i32,
    // types that get created during type checking and need to be freed afterwards
    temp_types: ptrvec.Vec,
    ctx: Ctx,
    globals: scope.Scope,
    errors: vec.Vec, // <TypeError>
    requests: vec.Vec // Vec<WaitingRequestMap> indexed by mod idx
}

def create(span_interner: *span.SpanInterner, mods: *mod.Map): TypeChecker {
    let tc = TypeChecker {
        span_interner: span_interner,
        mods: mods,
        sorted_mods: sorted_mods(mods, span_interner),
        temp_types: ptrvec.with_cap(256),
        ctx: empty_ctx(),
        globals: scope.create(),
        errors: vec.create(sizeof TypeError),
        requests: vec.with_cap(sizeof WaitingRequestMap, mod.num_mods(mods))
    };
    vec.init_zero(&tc.requests);

    tc.globals = create_global_scope(&tc);
    return tc;
}

def wait_for(tc: *TypeChecker, req: WaitingRequest): void {
    let idx = req.waiting_for_mod.idx;
    let map = vec.get_ptr(&tc.requests, idx) as *WaitingRequestMap;

    if map.init_flag == 0 {
        *map = create_waiting_request_map();
    }

    add_request(map, tc.span_interner, req);
}

def get_waiting_map(tc: *TypeChecker, mod: *mod.Module): *WaitingRequestMap {
    return vec.get_ptr(&tc.requests, mod.idx) as *WaitingRequestMap;
}

def create_global_scope(tc: *TypeChecker): scope.Scope {
    // TODO: this should be defined in builtin.kan
    let scope = scope.create();
    scope.s_bind_in(&scope, 3, "i32", push_tmp_ty(tc, ty.new_i32()));
    scope.s_bind_in(&scope, 6, "string", push_tmp_ty(tc, ty.new_string()));
    return scope;
}

def num_errs(tc: *TypeChecker): i32 {
    return tc.errors.len;
}

def push_err(tc: *TypeChecker, error: TypeError): void {
    vec.push(&tc.errors, &error as *void);
}

def push_mk_err(tc: *TypeChecker, text: string, span: span.Span): void {
    let error = err(tc, text, span);
    vec.push(&tc.errors, &error as *void);
}

def get_err(tc: *TypeChecker, i: i32): *TypeError {
    return vec.get_ptr(&tc.errors, i) as *TypeError;
}

def add_import_alias(tc: *TypeChecker, ident: *ident.Ident, mod: *mod.Module): void {
    map.insert(&tc.ctx.imports, map.key_from_ident(tc.span_interner, ident), mod as *void);
}

// sorts the mods after the number of imports inside
def sorted_mods(mods: *mod.Map, si: *span.SpanInterner): *i32 {
    let num_mods = mod.num_mods(mods);
    let import_nums = std.malloc(num_mods * sizeof i32) as *i32;

    let i = 0;
    while i < num_mods {
        let m = mod.get_mod(mods, i);
        *(import_nums + i) = mod.num_imports(m);
        i = i + 1;
    }

    let sorted_mods = isort(import_nums, num_mods);
    delete import_nums;

    return sorted_mods;
}

def make_mod_type(tc: *TypeChecker, m: *mod.Module): *ty.Mod {
    return ty.new_mod() as *ty.Mod;
}

def lookup_mod(tc: *TypeChecker, ident: *ident.Ident): *ty.Type {
    return scope.get_in(&tc.ctx.mod.ty.scope, tc.span_interner, ident);
}

def lookup_local(tc: *TypeChecker, ident: *ident.Ident): *ty.Type {
    return m_lookup_local(tc, ident, null);
}

def m_lookup_local(tc: *TypeChecker, ident: *ident.Ident, out_mod: **mod.Module): *ty.Type {
    let len = ident.len(ident, tc.span_interner);
    let dot_index = ident.index_of(ident, len, '.');
    if dot_index < 0 {
        // same module
        return scope.lookup(&tc.ctx.scopes, ident);
    }

    let mod = get_mod_by_alias(&tc.ctx, dot_index, ident.ident);
    if mod == null {
        io.printf("DBG DEBUG %.*s mod not found\n", len, ident.ident);
        return null;
    }

    if out_mod != null {
        *out_mod= mod;
    }

    let ty = mod.s_lookup(mod, len - dot_index - 1, ident.ident + dot_index + 1);
    if ty == null {
        io.printf("DBG DEBUG %.*s type not found\n", len, ident.ident);
        return null;
    }

    return ty;
}

def check(tc: *TypeChecker): void {
    let i = 0;
    // TODO: dont check stdlib if not needed
    while i < mod.num_mods(tc.mods) {
        let idx = *(tc.sorted_mods + i);
        let m = mod.get_mod(tc.mods, idx);

        check_mod(tc, m);

        i = i + 1;
    }
}

def check_mod(tc: *TypeChecker, mod: *mod.Module): *ty.Mod {
    // this module has already been resolved
    if mod.ty != null {
        return mod.ty;
    }

    io.printf("Checking %.*s\n", mod.path.len, mod.path.inner);
    mod.ty = make_mod_type(tc, mod);

    // TODO: don't free previous context, but instead create a map <Mod, Ctx>
    // so that we can context switch at arbitrary points
    // free previous context
    free_ctx(&tc.ctx);
    tc.ctx = create_ctx(mod, tc.span_interner, &tc.globals);

    let i = 0;
    while i < mod.num_stmts(mod) {
        let result = check_stmt(tc, mod.get_stmt_at(mod, i));

        if result != null {
            mod.set_stmt_at(mod, i, result);
        }

        i = i + 1;
    }

    return mod.ty;
}

def fill_func_def(
    tc: *TypeChecker,
    f_decl: *func.FuncDef,
    f_ty: *ty.Func
): void {
    let name = ident.to_string(&f_ty.name, tc.span_interner);
    io.printf("DBG: Defining '%s'\n", name);
    delete name;

    let error = false;

    // TODO: wait
    let ret_ty = lookup_local(tc, &f_decl.ret_ty.ident);
    if ret_ty == null {
        push_not_defined_error(tc, &f_decl.ret_ty.ident);
        error = true;
    }

    let num_params = func.num_params(f_decl);
    let param_types = ty.create_type_list(ptrvec.with_cap(num_params));

    let i = 0;
    while i < num_params {
        let p = func.get_param_ptr(f_decl, i);

        // TODO: handle varargs
        if !param.is_varargs(p) {
            // TODO: wait
            let p_ty = lookup_local(tc, &p.ty.ident);

            if p_ty == null {
                push_not_defined_error(tc, &p.ty.ident);
                error = true;
            } else {
                ty.push_type(&param_types, p_ty);
            }
        }

        i = i + 1;
    }

    if !error {
        f_ty.params = param_types;
        f_ty.ret = ret_ty;
    } else {
        ty.free_type_list(&param_types);
    }
}

def push_tmp_ty(tc: *TypeChecker, ty: *ty.Type): *ty.Type {
    ptrvec.push_ptr(&tc.temp_types, ty as *void);
    return ty;
}

def bind_local(tc: *TypeChecker, ident: *ident.Ident, ty: *ty.Type): void {
    scope.bind(&tc.ctx.scopes, ident, ty);
}

def bind_mod(tc: *TypeChecker, ident: *ident.Ident, ty: *ty.Type): void {
    scope.bind_in(&tc.ctx.mod.ty.scope, tc.span_interner, ident, ty);
}

def fill_struct_fields(
    tc: *TypeChecker,
    s_decl: *record.StructDecl,
    s_ty: *ty.Struct
): void {
    // TODO: handle self fields
    ty.tychk_touch(s_ty as *ty.Type);

    let s = ident.to_string(&s_decl.name, tc.span_interner);
    io.printf("----\nDBG: resolving %s\n", s);
    delete s;

    let error = false;
    let waiting = false;

    let nf = record.num_fields(s_decl);
    let i = 0;
    while i < nf {
        let f = record.empty_field();
        if !record.field_at(s_decl, i, &f) {
            push_internal_error(tc, s_decl.name.ident_span, "could not get field");
            return;
        }

        let s = tyid.to_string(&f.ty, tc.span_interner);
        io.printf("DBG: field_ty %s\n", s);
        delete s;

        let mod: *mod.Module = null;
        let field_ty = m_lookup_local(tc, &f.ty.ident, &mod);

        // pointers are ok, because their size is known
        let is_ptr = tyid.is_ptr(&f.ty);

        if field_ty != null {
            if ty.is_initialized(field_ty) {
                if is_ptr {
                    field_ty = ty.new_ptr(f.ty.pointer_count, field_ty);
                    push_tmp_ty(tc, field_ty);
                }

                ty.push_field(s_ty, f.ident, field_ty);
            } else {
                if ty.is_struct(field_ty) {
                    wait_for_struct_field(tc, mod, f.ty.ident, &f, i, s_ty);
                    if !is_ptr {
                        waiting = true;
                    }
                } else {
                    push_internal_error(tc, f.ident.ident_span, "reached unreachable code");
                    return;
                }
            }
        } else {
            wait_for_struct_field(tc, mod, f.ty.ident, &f, i, s_ty);
            if !is_ptr {
                waiting = true;
            }
        }

        i = i + 1;
    }

    let s = ident.to_string(&s_decl.name, tc.span_interner);

    if !error && !waiting {
        let ty = s_ty as *ty.Type;
        ty.fill_width_align(ty);

        io.printf("DBG: %s has a width of %d, align of %d\n", s, ty.width, ty.align);
        delete s;

        update_waiting(tc, tc.ctx.mod, ty, &s_ty.name);
        return;
    }

    delete s;
}

def wait_for_struct_field(
    tc: *TypeChecker,
    mod: *mod.Module,
    waiting_for: ident.Ident,
    field: *record.Field,
    field_idx: i32,
    s_ty: *ty.Struct
): void {
    // same module
    if mod == null {
        mod = tc.ctx.mod;
    }

    let field_ty: *ty.Type = null;
    let kind = WAITING_TYPE;

    if tyid.is_ptr(&field.ty) {
        kind = WAITING_PTR;
        field_ty = ty.new_ptr(field.ty.pointer_count, null);
        push_tmp_ty(tc, field_ty);
    }
    ty.push_field(s_ty, field.ident, field_ty);

    let request = create_waiting_request(
        kind,
        s_ty as *ty.Type,
        tc.ctx.mod,
        waiting_for,
        mod,
        field_idx
    );

    wait_for(tc, request);
}

def update_waiting(
    tc: *TypeChecker,
    mod: *mod.Module,
    resolved_ty: *ty.Type,
    ident: *ident.Ident
): void {
    // only execute this once
    if !ty.was_touched_by_tychk(resolved_ty) {
        return;
    }
    ty.tychk_untouch(resolved_ty);

    let waiting_map = get_waiting_map(tc, mod);
    let waiting = get_waiting(waiting_map, tc.span_interner, ident);

    if waiting == null {
        let name = ident.to_string(ident, tc.span_interner);
        io.printf(
            "DBG: no other types waiting for %s width: %d, align: %d\n",
            name, resolved_ty.width, resolved_ty.align
        );
        delete name;
        return;
    }

    let name = ident.to_string(ident, tc.span_interner);
    io.printf("DBG: %d types waiting for %s\n", waiting.len, name);
    delete name;

    let i = 0;
    while i < waiting.len {
        let req = vec.get_ptr(waiting, i) as *WaitingRequest;

        let waiting_ty = req.to_fill;
        let waiting_mod = req.to_fill_mod;
        let waiting_s_ty = waiting_ty as *ty.Struct;
        let waiting_ident = &waiting_s_ty.name;

        // -----
                let updated_name = ident.to_string(ident, tc.span_interner);
                let waiting_name = ident.to_string(waiting_ident, tc.span_interner);
                io.printf(
                    "DBG: %s is waiting for %s\n", waiting_name, updated_name
                );
                delete updated_name;
                delete waiting_name;
        // -----

        let field = ty.field_at(waiting_s_ty, req.field_idx);

        if req.kind == WAITING_TYPE {
            field.ty = resolved_ty;
        } else if req.kind == WAITING_PTR {
            if !ty.is_ptr(field.ty) {
                push_internal_error(tc, waiting_ident.ident_span, "type is not a ptr");
                return;
            }

            ty.as_ptr(field.ty).inner = resolved_ty;
        }

        let completely_initialized = ty.fill_width_align(waiting_ty);
        if completely_initialized {
            // recursively update types waiting for waiting_ty
            update_waiting(tc, waiting_mod, waiting_ty, waiting_ident);
        }

        i = i + 1;
    }

    let s = ident.to_string(ident, tc.span_interner);
    io.printf("DBG: ---- %s width: %d, align: %d\n", s, resolved_ty.width, resolved_ty.align);
    delete s;
}

def get_import_alias(tc: *TypeChecker, imp: *ast.ImportStmt): ident.Ident {
    // when we support "import as" constructs, this will become more interesting
    let span = span.get(tc.span_interner, imp.mod.ident_span);
    let p = path.empty();
    if path.from_str_len(imp.mod.ident, span.len, &p) != 0 {
        return ident.empty();
    }

    let lsp = path.last_separator_ptr(&p);
    if lsp == null {
        // there is no separator
        return imp.mod;
    }
    lsp = lsp + 1; // skip the actual separator

    let offset = lsp - imp.mod.ident;
    let start = span.start + offset;
    let end = start + p.len - offset;

    let new_span = span.create(tc.span_interner, start, end, span.ctx);
    return ident.from_str(new_span, lsp);
}

// returns the statement which should replace the old one
// if a new statement is created, this function will free the old one
def check_stmt(tc: *TypeChecker, s: *ast.Stmt): *ast.Stmt {
    // STMT_BLOCK
    // STMT_IF
    // STMT_WHILE
    // STMT_DELETE
    // STMT_RETURN

    // STMT_IMPORT
    if ast.is_import_stmt(s) {
        let i_s = ast.as_import_stmt(s);

        let error: string = null;
        let imported_mod = mod.try_get_mod_from_import(
            tc.mods,
            tc.ctx.mod,
            tc.span_interner,
            i_s,
            &error
        );

        // no such module
        if imported_mod == null {
            push_mk_err(tc, error, i_s.mod.ident_span);
            return null;
        }

        let alias = get_import_alias(tc, i_s);
        if alias.ident == null {
            push_internal_error(tc, i_s.mod.ident_span, "import alias was empty");
            return null;
        }
        add_import_alias(tc, &alias, imported_mod);

        let mod_ty = imported_mod.ty;
        // the imported module has not yet been resolved
        if mod_ty == null {
            // safe current context
            let ctx = tc.ctx;
            tc.ctx = empty_ctx();
            mod_ty = check_mod(tc, imported_mod);
            free_ctx(&tc.ctx);
            // and restore it after resolving the module
            tc.ctx = ctx;
        }

        bind_local(tc, &alias, mod_ty as *ty.Type);

        return s;
    }

    // STMT_STRUCT_DECL
    if ast.is_struct_decl_stmt(s) {
        let sd = &ast.as_struct_decl_stmt(s).decl;

        let prev = lookup_mod(tc, &sd.name);
        if prev != null {
            push_duplicate_def_error(tc, &sd.name);
            return null;
        }

        let definition = ty.new_type(TY_STRUCT, sizeof ty.Struct);
        push_tmp_ty(tc, definition);
        ty.init_struct(definition, sd.name);

        fill_struct_fields(tc, sd, ty.as_struct(definition));
        bind_mod(tc, &sd.name, definition);

        return s;
    }

    // TODO: implement
    // STMT_FUNC_DECL
    if ast.is_func_decl_stmt(s) {
        let fd = &ast.as_func_decl_stmt(s).decl;

        // let definition = lookup_local(tc, &fd.name);
        // if definition == null {
        //     let name = ident.to_string(&fd.name, tc.span_interner);
        //     // TODO: is it possible to hit this?
        //     io.printf("\n\nDBG ERROR '%s' was not defined\n\n", name);
        //     delete name;
        // }

        // if !ty.is_func(definition) {
        //     // TODO: error
        //     std.abort();
        // }

        // fill_func_def(tc, fd, definition as *ty.Func);
        return s;
    }

    // STMT_LET
    if ast.is_let_stmt(s) {
        let l_s = ast.as_let_stmt(s);
        let value = check_expr(tc, l_s.value);
        if value == null {
            return null;
        }
        l_s.value = value;
        bind_local(tc, &l_s.ident, l_s.value.ty);
        return s;
    }

    // STMT_EXPR
    if ast.is_expr_stmt(s) {
        let e_s = ast.as_expr_stmt(s);
        let expr = check_expr(tc, e_s.expr);
        if expr == null {
            return null;
        }
        e_s.expr = expr;
        return s;
    }

    return null;
}

def check_expr(tc: *TypeChecker, e: *ast.Expr): *ast.Expr {
    // EXPR_CHAR
    // EXPR_BINARY
    // EXPR_UNARY
    // EXPR_ASSIGN
    // EXPR_CALL
    // EXPR_INIT
    // EXPR_AS
    // EXPR_NEW

    // TODO: debug remove
    // let s = ast.expr_to_string(e, tc.span_interner);
    // io.printf("%s\n", s);
    // delete s;

    // EXPR_INT
    if ast.is_int_expr(e) {
        e.ty = scope.s_get_in(&tc.globals, 3, "i32");
        return e;
    }

    // EXPR_STRING
    if ast.is_string_expr(e) {
        e.ty = scope.s_get_in(&tc.globals, 6, "string");
        return e;
    }

    // EXPR_IDENT
    if ast.is_ident_expr(e) {
        let ident = &ast.as_ident_expr(e).ident;
        e.ty = lookup_local(tc, ident);

        if e.ty == null {
            push_not_defined_error(tc, ident);
            return null;
        }

        return e;
    }

    // EXPR_ACCESS
    if ast.is_access_expr(e) {
        let a_e = ast.as_access_expr(e);

        if !ast.is_ident_expr(a_e.left) {
            push_invalid_access_error(tc, a_e.left);
            return null;
        }

        let left = check_expr(tc, a_e.left);
        if left == null {
            return null;
        }

        a_e.left = left;

        // Type cannot be accessed with '.'
        if !ty.is_scoped(a_e.left.ty) || ty.is_struct(a_e.left.ty) {
            // struct types are the types of the definition and not an actual
            // instance (basically class vs object of that class). There is currently
            // no mechanism to access the fields of a struct definition, which could
            // change in the future
            push_not_accessible_with_error(tc, a_e.left);
            return null;
        }

        let scope = ty.get_scope(a_e.left.ty);
        if scope == null {
            push_internal_error(tc, a_e.left.span, "no scope for type found");
            return null;
        }

        // bring scope into current context
        scope.push_scope(&tc.ctx.scopes, scope);

        let right = check_expr(tc, a_e.right);
        if right == null {
            // TODO: could there be more than one?
            scope.close_scope_no_free(&tc.ctx.scopes);
            return null;
        }

        // TODO: could there be more than one?
        scope.close_scope_no_free(&tc.ctx.scopes);

        a_e.right = right;

        return e;
    }

    return e;
}

def free_tc(tc: *TypeChecker): void {
    free_ctx(&tc.ctx);

    let i = 0;
    while i < tc.temp_types.len {
        ty.type_free(ptrvec.get(&tc.temp_types, i) as *ty.Type);
        i = i + 1;
    }

    ptrvec.free_v(&tc.temp_types);
    delete tc.sorted_mods;

    i = 0;
    while i < tc.errors.len {
        free_err(get_err(tc, i));
        i = i + 1;
    }
    vec.free_v(&tc.errors);

    scope.free_s(&tc.globals);


    i = 0;
    while i < tc.requests.len {
        free_wait_map(vec.get_ptr(&tc.requests, i) as *WaitingRequestMap);
        i = i + 1;
    }
    vec.free_v(&tc.requests);
}

#include "error_code.h"

def push_internal_error(tc: *TypeChecker, span: span.Span, text: string): void {
    let text = std.err2str(ERROR_INTERNAL, text);
    push_mk_err(tc, text, span);
}

def push_simple_error(tc: *TypeChecker, code: i32, ident: *ident.Ident): void {
    let span = ident.ident_span;
    let len = span.get(tc.span_interner, span).len;
    let text = std.err2str(code, len, ident.ident);

    push_mk_err(tc, text, span);
}

def push_duplicate_def_error(tc: *TypeChecker, name: *ident.Ident): void {
    push_simple_error(tc, ERROR_DUPLICATE_DEFINTION, name);
}

def push_not_defined_error(tc: *TypeChecker, name: *ident.Ident): void {
    push_simple_error(tc, ERROR_NOT_DEFINED, name);
}

def push_invalid_access_error(tc: *TypeChecker, e: *ast.Expr): void {
    let ty_s = ast.expr2str(e.tag);
    let error = std.err2str(ERROR_INVALID_ACCESS_TYPE, ty_s);

    push_mk_err(tc, error, e.span);
}

def push_not_accessible_with_error(tc: *TypeChecker, e: *ast.Expr): void {
    let ty_s = ty.to_string(e.ty, tc.span_interner);
    let error = std.err2str(ERROR_NOT_ACCESSIBLE_WITH_OP, ty_s, ".");
    delete ty_s;

    push_mk_err(tc, error, e.span);
}
