import "ast";
import "ptrvec";
import "span";
import "mod";
import "map";
import "scope";
import "path";

// TODO: only temp solution
import "std";
import "io";
import "ident";

extern def isort(arr: *i32, len: i32): *i32;

type Ctx struct {
    mod: *mod.Module,
    import_map: map.Map, // Map of *PathBuf
    scopes: scope.ScopeStack
}

def empty_ctx(): Ctx {
    return Ctx { mod: null, import_map: map.create(), scopes: scope.empty_stack() };
}

def create_ctx(mods: *mod.Map, mod: *mod.Module, span_interner: *span.SpanInterner): Ctx {
    let num_imports = mod.num_imports(mod);
    let import_map = map.with_cap(num_imports);

    let i = 0;
    while i < num_imports {
        let imp = mod.get_import_at(mod, i);
        let imported_mod = mod.try_get_mod_from_import(mods, mod, span_interner, imp);
        if imported_mod == null {
            std.abort();
        }

        let key = map.key_from_ident(span_interner, &imp.mod);
        map.insert(&import_map, key, imported_mod as *void);
        i = i + 1;
    }

    let scopes = scope.create_stack(span_interner);
    scope.open_scope(&scopes);

    return Ctx {
        mod: mod,
        import_map: import_map,
        scopes: scopes
    };
}

def free_ctx(ctx: *Ctx): void {
    map.free_m(&ctx.import_map);
    scope.free_stack(&ctx.scopes);
}

type TypeChecker struct {
    span_interner: *span.SpanInterner,
    mods: *mod.Map,
    sorted_mods: *i32,
    ctx: Ctx
}

def create(span_interner: *span.SpanInterner, mods: *mod.Map): TypeChecker {
    return TypeChecker {
        span_interner: span_interner,
        mods: mods,
        sorted_mods: sorted_mods(mods),
        ctx: empty_ctx()
    };
}

def sorted_mods(mods: *mod.Map): *i32 {
    let num_mods = mod.num_mods(mods);
    let import_nums = std.malloc(num_mods * sizeof i32) as *i32;

    let i = 0;
    while i < num_mods {
        let m = mod.get_mod(mods, i);
        *(import_nums + i) = mod.num_imports(m);
        i = i + 1;
    }

    let sorted_mods = isort(import_nums, num_mods);
    delete import_nums;

    return sorted_mods;
}

def lookup_ident(tc: *TypeChecker, ident: *ident.Ident): *ty.Type {
    return scope.lookup(&tc.ctx.scopes, ident);
}

def check(tc: *TypeChecker): void {
    let i = 0;
    while i < mod.num_mods(tc.mods) {
        let idx = *(tc.sorted_mods + i);
        let m = mod.get_mod(tc.mods, idx);

        check_mod(tc, m);

        i = i + 1;
    }
}

def check_mod(tc: *TypeChecker, mod: *mod.Module): void {
     // free previous context
    free_ctx(&tc.ctx);
    tc.ctx = create_ctx(tc.mods, mod, tc.span_interner);

    let s = path.to_string(&mod.path);
    // io.printf("%s %d\n", s, mod.num_imports(mod));
    delete s;

    let i = 0;
    while i < mod.num_stmts(mod) {
        check_stmt(tc, mod.get_stmt_at(mod, i));
        i = i + 1;
    }
}

def check_stmt(tc: *TypeChecker, s: *ast.Stmt): *ast.Stmt {
    // STMT_IMPORT
    // STMT_FUNC_DECL
    // STMT_STRUCT_DECL
    // STMT_BLOCK
    // STMT_IF
    // STMT_WHILE
    // STMT_DELETE
    // STMT_RETURN

    // STMT_LET
    if ast.is_let_stmt(s) {
        let l_s = ast.as_let_stmt(s);
        l_s.value = check_expr(tc, l_s.value);
        scope.bind(&tc.ctx.scopes, &l_s.ident, l_s.value.ty);
        return s;
    }

    // STMT_EXPR
    if ast.is_expr_stmt(s) {
        let e_s = ast.as_expr_stmt(s);
        e_s.expr = check_expr(tc, e_s.expr);
        return s;
    }

    return null;
}

def check_expr(tc: *TypeChecker, e: *ast.Expr): *ast.Expr {
    let s = ast.expr_to_string(e, tc.span_interner);
    io.printf("%s\n", s);
    delete s;

    if ast.is_int_expr(e) {
        e.ty = ty.new_i32();
        return e;
    }

    if ast.is_ident_expr(e) {
        e.ty = ty.clone(lookup_ident(tc, &ast.as_ident_expr(e).ident));

        // TODO: error
        if e.ty == null {
            return e;
        }

        let s = ty.to_string(e.ty, tc.span_interner);
        io.printf("type: %s\n", s);
        delete s;

        return e;
    }

    return e;
}

def free_tc(tc: *TypeChecker): void {
    free_ctx(&tc.ctx);
    delete tc.sorted_mods;
}
