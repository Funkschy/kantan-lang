import "ast";
import "std";
import "str";
import "span";
import "ident";

type Kind enum {
    Path, Array
}

type ArrayData struct {
    len: *ast.Expr,
    inner: Type
}

extern def strtol(start: string, end: *string, base: i32): i64;

def (a: *ArrayData) unchecked_len(): i64 {
    let value_span = a.len.span;
    let value_end = value_span.end;
    return strtol(value_span.start, &value_end, 10);
}

type TypeData union {
    path: ident.Ident,
    array: *ArrayData
}

type Type struct {
    kind: Kind,
    pointer_count: u32,
    data: TypeData
}

def empty(): Type {
    let empty = create_path(ident.empty());
    return empty;
}

def create_path(ident: ident.Ident): Type {
    return create_path_ptr(ident, 0);
}

def create_path_ptr(ident: ident.Ident, pointer_count: u32): Type {
    return Type {
        kind: Kind.Path,
        pointer_count: pointer_count,
        data: TypeData {
            path: ident
        }
    };
}

def create_array_ptr(inner: Type, len: *ast.Expr, pointer_count: u32): Type {
    return Type {
        kind: Kind.Array,
        pointer_count: pointer_count,
        data: TypeData {
            array: new ArrayData { len: len, inner: inner }
        }
    };
}

def (t: *Type) is_empty(): bool {
    return t.pointer_count == 0 && t.kind == Kind.Path && ident.is_empty(&t.data.path);
}

def (t: *Type) span(): span.Span {
    return t.ident().span;
}

def (t: *Type) ident(): ident.Ident {
    if t.kind == Kind.Array {
        return t.data.array.inner.ident();
    }

    return t.data.path;
}

def (t: *Type) is_ptr(): bool {
    return t.pointer_count > 0;
}

def (t: *Type) is_array(): bool {
    return t.kind == Kind.Array;
}

def (t: *Type) free() {
    if t.kind == Kind.Array {
        ast.expr_free(t.data.array.len);
        t.data.array.inner.free();
        delete t.data.array;
    }
}

def (t: *Type) to_string(): str.String {
    let s = str.from("");
    for let i: u32 = 0; i < t.pointer_count; i += 1 {
        s.push(str.view(1, "*"));
    }

    if t.kind == Kind.Array {
        let inner = t.data.array.inner.to_string();
        defer inner.free();
        s.push(str.view(3, "[x]"));
        s.push(inner.view());
    } else {
        let ident = t.ident().to_string();
        defer ident.free();

        s.push(ident.view());
    }

    return s;
}
