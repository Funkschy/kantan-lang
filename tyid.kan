import "std";
import "str";
import "span";
import "ident";

type TypeData union {
    path: ident.Ident
}

type Type struct {
    pointer_count: u32,
    data: TypeData
}

def empty(): Type {
    return create_path(ident.empty());
}

def create_path(ident: ident.Ident): Type {
    return create_path_ptr(ident, 0);
}

def create_path_ptr(ident: ident.Ident, pointer_count: u32): Type {
    return Type {
        pointer_count: pointer_count,
        data: TypeData {
            path: ident
        }
    };
}

def (t: *Type) is_empty(): bool {
    return t.pointer_count == 0 && ident.is_empty(&t.data.path);
}

def (t: *Type) span(): span.Span {
    return t.data.path.span;
}

def (t: *Type) is_ptr(): bool {
    return t.pointer_count > 0;
}

def (t: *Type) to_string(): str.String {
    let ident = t.data.path.to_string();
    defer ident.free();

    let s = str.from("");
    for let i: u32 = 0; i < t.pointer_count; i += 1 {
        s.push(str.view(1, "*"));
    }
    s.push(ident.view());

    return s;
}
